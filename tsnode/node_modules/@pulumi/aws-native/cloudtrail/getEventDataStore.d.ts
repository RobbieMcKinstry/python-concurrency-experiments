import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * A storage lake of event data against which you can run complex SQL-based queries. An event data store can include events that you have logged on your account from the last 90 to 2555 days (about three months to up to seven years).
 */
export declare function getEventDataStore(args: GetEventDataStoreArgs, opts?: pulumi.InvokeOptions): Promise<GetEventDataStoreResult>;
export interface GetEventDataStoreArgs {
    /**
     * The ARN of the event data store.
     */
    eventDataStoreArn: string;
}
export interface GetEventDataStoreResult {
    /**
     * The advanced event selectors that were used to select events for the data store.
     */
    readonly advancedEventSelectors?: outputs.cloudtrail.EventDataStoreAdvancedEventSelector[];
    /**
     * The timestamp of the event data store's creation.
     */
    readonly createdTimestamp?: string;
    /**
     * The ARN of the event data store.
     */
    readonly eventDataStoreArn?: string;
    /**
     * Indicates whether the event data store includes events from all regions, or only from the region in which it was created.
     */
    readonly multiRegionEnabled?: boolean;
    /**
     * The name of the event data store.
     */
    readonly name?: string;
    /**
     * Indicates that an event data store is collecting logged events for an organization.
     */
    readonly organizationEnabled?: boolean;
    /**
     * The retention period, in days.
     */
    readonly retentionPeriod?: number;
    /**
     * The status of an event data store. Values are ENABLED and PENDING_DELETION.
     */
    readonly status?: string;
    readonly tags?: outputs.cloudtrail.EventDataStoreTag[];
    /**
     * Indicates whether the event data store is protected from termination.
     */
    readonly terminationProtectionEnabled?: boolean;
    /**
     * The timestamp showing when an event data store was updated, if applicable. UpdatedTimestamp is always either the same or newer than the time shown in CreatedTimestamp.
     */
    readonly updatedTimestamp?: string;
}
export declare function getEventDataStoreOutput(args: GetEventDataStoreOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEventDataStoreResult>;
export interface GetEventDataStoreOutputArgs {
    /**
     * The ARN of the event data store.
     */
    eventDataStoreArn: pulumi.Input<string>;
}
