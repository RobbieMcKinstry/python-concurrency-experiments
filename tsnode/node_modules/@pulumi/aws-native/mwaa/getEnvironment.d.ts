import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Resource schema for AWS::MWAA::Environment
 */
export declare function getEnvironment(args: GetEnvironmentArgs, opts?: pulumi.InvokeOptions): Promise<GetEnvironmentResult>;
export interface GetEnvironmentArgs {
    name: string;
}
export interface GetEnvironmentResult {
    /**
     * Key/value pairs representing Airflow configuration variables.
     *     Keys are prefixed by their section:
     *
     *     [core]
     *     dags_folder={AIRFLOW_HOME}/dags
     *
     *     Would be represented as
     *
     *     "core.dags_folder": "{AIRFLOW_HOME}/dags"
     */
    readonly airflowConfigurationOptions?: any;
    readonly airflowVersion?: string;
    readonly arn?: string;
    readonly dagS3Path?: string;
    readonly environmentClass?: string;
    readonly executionRoleArn?: string;
    readonly loggingConfiguration?: outputs.mwaa.EnvironmentLoggingConfiguration;
    readonly maxWorkers?: number;
    readonly minWorkers?: number;
    readonly networkConfiguration?: outputs.mwaa.EnvironmentNetworkConfiguration;
    readonly pluginsS3ObjectVersion?: string;
    readonly pluginsS3Path?: string;
    readonly requirementsS3ObjectVersion?: string;
    readonly requirementsS3Path?: string;
    readonly schedulers?: number;
    readonly sourceBucketArn?: string;
    /**
     * A map of tags for the environment.
     */
    readonly tags?: any;
    readonly webserverAccessMode?: enums.mwaa.EnvironmentWebserverAccessMode;
    readonly webserverUrl?: string;
    readonly weeklyMaintenanceWindowStart?: string;
}
export declare function getEnvironmentOutput(args: GetEnvironmentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEnvironmentResult>;
export interface GetEnvironmentOutputArgs {
    name: pulumi.Input<string>;
}
