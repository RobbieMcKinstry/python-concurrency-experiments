import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * Resource Type definition for AWS::ElasticLoadBalancing::LoadBalancer
 */
export declare function getLoadBalancer(args: GetLoadBalancerArgs, opts?: pulumi.InvokeOptions): Promise<GetLoadBalancerResult>;
export interface GetLoadBalancerArgs {
    id: string;
}
export interface GetLoadBalancerResult {
    readonly accessLoggingPolicy?: outputs.elasticloadbalancing.LoadBalancerAccessLoggingPolicy;
    readonly appCookieStickinessPolicy?: outputs.elasticloadbalancing.LoadBalancerAppCookieStickinessPolicy[];
    readonly availabilityZones?: string[];
    readonly canonicalHostedZoneName?: string;
    readonly canonicalHostedZoneNameID?: string;
    readonly connectionDrainingPolicy?: outputs.elasticloadbalancing.LoadBalancerConnectionDrainingPolicy;
    readonly connectionSettings?: outputs.elasticloadbalancing.LoadBalancerConnectionSettings;
    readonly crossZone?: boolean;
    readonly dNSName?: string;
    readonly healthCheck?: outputs.elasticloadbalancing.LoadBalancerHealthCheck;
    readonly id?: string;
    readonly instances?: string[];
    readonly lBCookieStickinessPolicy?: outputs.elasticloadbalancing.LoadBalancerLBCookieStickinessPolicy[];
    readonly listeners?: outputs.elasticloadbalancing.LoadBalancerListeners[];
    readonly policies?: outputs.elasticloadbalancing.LoadBalancerPolicies[];
    readonly securityGroups?: string[];
    readonly sourceSecurityGroupGroupName?: string;
    readonly sourceSecurityGroupOwnerAlias?: string;
    readonly subnets?: string[];
    readonly tags?: outputs.elasticloadbalancing.LoadBalancerTag[];
}
export declare function getLoadBalancerOutput(args: GetLoadBalancerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLoadBalancerResult>;
export interface GetLoadBalancerOutputArgs {
    id: pulumi.Input<string>;
}
