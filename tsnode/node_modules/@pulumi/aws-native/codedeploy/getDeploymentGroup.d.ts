import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * Resource Type definition for AWS::CodeDeploy::DeploymentGroup
 */
export declare function getDeploymentGroup(args: GetDeploymentGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetDeploymentGroupResult>;
export interface GetDeploymentGroupArgs {
    id: string;
}
export interface GetDeploymentGroupResult {
    readonly alarmConfiguration?: outputs.codedeploy.DeploymentGroupAlarmConfiguration;
    readonly autoRollbackConfiguration?: outputs.codedeploy.DeploymentGroupAutoRollbackConfiguration;
    readonly autoScalingGroups?: string[];
    readonly blueGreenDeploymentConfiguration?: outputs.codedeploy.DeploymentGroupBlueGreenDeploymentConfiguration;
    readonly deployment?: outputs.codedeploy.DeploymentGroupDeployment;
    readonly deploymentConfigName?: string;
    readonly deploymentStyle?: outputs.codedeploy.DeploymentGroupDeploymentStyle;
    readonly eCSServices?: outputs.codedeploy.DeploymentGroupECSService[];
    readonly ec2TagFilters?: outputs.codedeploy.DeploymentGroupEC2TagFilter[];
    readonly ec2TagSet?: outputs.codedeploy.DeploymentGroupEC2TagSet;
    readonly id?: string;
    readonly loadBalancerInfo?: outputs.codedeploy.DeploymentGroupLoadBalancerInfo;
    readonly onPremisesInstanceTagFilters?: outputs.codedeploy.DeploymentGroupTagFilter[];
    readonly onPremisesTagSet?: outputs.codedeploy.DeploymentGroupOnPremisesTagSet;
    readonly outdatedInstancesStrategy?: string;
    readonly serviceRoleArn?: string;
    readonly tags?: outputs.codedeploy.DeploymentGroupTag[];
    readonly triggerConfigurations?: outputs.codedeploy.DeploymentGroupTriggerConfig[];
}
export declare function getDeploymentGroupOutput(args: GetDeploymentGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDeploymentGroupResult>;
export interface GetDeploymentGroupOutputArgs {
    id: pulumi.Input<string>;
}
