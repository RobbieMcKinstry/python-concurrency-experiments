import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Resource schema for AWS::Personalize::Solution.
 */
export declare class Solution extends pulumi.CustomResource {
    /**
     * Get an existing Solution resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Solution;
    /**
     * Returns true if the given object is an instance of Solution.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Solution;
    /**
     * The ARN of the dataset group that provides the training data.
     */
    readonly datasetGroupArn: pulumi.Output<string>;
    /**
     * When your have multiple event types (using an EVENT_TYPE schema field), this parameter specifies which event type (for example, 'click' or 'like') is used for training the model. If you do not provide an eventType, Amazon Personalize will use all interactions for training with equal weight regardless of type.
     */
    readonly eventType: pulumi.Output<string | undefined>;
    /**
     * The name for the solution
     */
    readonly name: pulumi.Output<string>;
    /**
     * Whether to perform automated machine learning (AutoML). The default is false. For this case, you must specify recipeArn.
     */
    readonly performAutoML: pulumi.Output<boolean | undefined>;
    /**
     * Whether to perform hyperparameter optimization (HPO) on the specified or selected recipe. The default is false. When performing AutoML, this parameter is always true and you should not set it to false.
     */
    readonly performHPO: pulumi.Output<boolean | undefined>;
    /**
     * The ARN of the recipe to use for model training. Only specified when performAutoML is false.
     */
    readonly recipeArn: pulumi.Output<string | undefined>;
    readonly solutionArn: pulumi.Output<string>;
    readonly solutionConfig: pulumi.Output<outputs.personalize.SolutionConfig | undefined>;
    /**
     * Create a Solution resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SolutionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Solution resource.
 */
export interface SolutionArgs {
    /**
     * The ARN of the dataset group that provides the training data.
     */
    datasetGroupArn: pulumi.Input<string>;
    /**
     * When your have multiple event types (using an EVENT_TYPE schema field), this parameter specifies which event type (for example, 'click' or 'like') is used for training the model. If you do not provide an eventType, Amazon Personalize will use all interactions for training with equal weight regardless of type.
     */
    eventType?: pulumi.Input<string>;
    /**
     * The name for the solution
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to perform automated machine learning (AutoML). The default is false. For this case, you must specify recipeArn.
     */
    performAutoML?: pulumi.Input<boolean>;
    /**
     * Whether to perform hyperparameter optimization (HPO) on the specified or selected recipe. The default is false. When performing AutoML, this parameter is always true and you should not set it to false.
     */
    performHPO?: pulumi.Input<boolean>;
    /**
     * The ARN of the recipe to use for model training. Only specified when performAutoML is false.
     */
    recipeArn?: pulumi.Input<string>;
    solutionConfig?: pulumi.Input<inputs.personalize.SolutionConfigArgs>;
}
