"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TagAssociation = exports.Tag = exports.Resource = exports.PrincipalPermissions = exports.Permissions = exports.getTagAssociationOutput = exports.getTagAssociation = exports.getTagOutput = exports.getTag = exports.getResourceOutput = exports.getResource = exports.getPrincipalPermissionsOutput = exports.getPrincipalPermissions = exports.getPermissionsOutput = exports.getPermissions = exports.getDataLakeSettingsOutput = exports.getDataLakeSettings = exports.DataLakeSettings = exports.DataCellsFilter = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.DataCellsFilter = null;
utilities.lazyLoad(exports, ["DataCellsFilter"], () => require("./dataCellsFilter"));
exports.DataLakeSettings = null;
utilities.lazyLoad(exports, ["DataLakeSettings"], () => require("./dataLakeSettings"));
exports.getDataLakeSettings = null;
exports.getDataLakeSettingsOutput = null;
utilities.lazyLoad(exports, ["getDataLakeSettings", "getDataLakeSettingsOutput"], () => require("./getDataLakeSettings"));
exports.getPermissions = null;
exports.getPermissionsOutput = null;
utilities.lazyLoad(exports, ["getPermissions", "getPermissionsOutput"], () => require("./getPermissions"));
exports.getPrincipalPermissions = null;
exports.getPrincipalPermissionsOutput = null;
utilities.lazyLoad(exports, ["getPrincipalPermissions", "getPrincipalPermissionsOutput"], () => require("./getPrincipalPermissions"));
exports.getResource = null;
exports.getResourceOutput = null;
utilities.lazyLoad(exports, ["getResource", "getResourceOutput"], () => require("./getResource"));
exports.getTag = null;
exports.getTagOutput = null;
utilities.lazyLoad(exports, ["getTag", "getTagOutput"], () => require("./getTag"));
exports.getTagAssociation = null;
exports.getTagAssociationOutput = null;
utilities.lazyLoad(exports, ["getTagAssociation", "getTagAssociationOutput"], () => require("./getTagAssociation"));
exports.Permissions = null;
utilities.lazyLoad(exports, ["Permissions"], () => require("./permissions"));
exports.PrincipalPermissions = null;
utilities.lazyLoad(exports, ["PrincipalPermissions"], () => require("./principalPermissions"));
exports.Resource = null;
utilities.lazyLoad(exports, ["Resource"], () => require("./resource"));
exports.Tag = null;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));
exports.TagAssociation = null;
utilities.lazyLoad(exports, ["TagAssociation"], () => require("./tagAssociation"));
// Export enums:
__exportStar(require("../types/enums/lakeformation"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:lakeformation:DataCellsFilter":
                return new exports.DataCellsFilter(name, undefined, { urn });
            case "aws-native:lakeformation:DataLakeSettings":
                return new exports.DataLakeSettings(name, undefined, { urn });
            case "aws-native:lakeformation:Permissions":
                return new exports.Permissions(name, undefined, { urn });
            case "aws-native:lakeformation:PrincipalPermissions":
                return new exports.PrincipalPermissions(name, undefined, { urn });
            case "aws-native:lakeformation:Resource":
                return new exports.Resource(name, undefined, { urn });
            case "aws-native:lakeformation:Tag":
                return new exports.Tag(name, undefined, { urn });
            case "aws-native:lakeformation:TagAssociation":
                return new exports.TagAssociation(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "lakeformation", _module);
//# sourceMappingURL=index.js.map