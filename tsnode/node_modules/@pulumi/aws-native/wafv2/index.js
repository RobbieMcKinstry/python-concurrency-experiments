"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebACLAssociation = exports.WebACL = exports.RuleGroup = exports.RegexPatternSet = exports.LoggingConfiguration = exports.IPSet = exports.getWebACLOutput = exports.getWebACL = exports.getRuleGroupOutput = exports.getRuleGroup = exports.getRegexPatternSetOutput = exports.getRegexPatternSet = exports.getLoggingConfigurationOutput = exports.getLoggingConfiguration = exports.getIPSetOutput = exports.getIPSet = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.getIPSet = null;
exports.getIPSetOutput = null;
utilities.lazyLoad(exports, ["getIPSet", "getIPSetOutput"], () => require("./getIPSet"));
exports.getLoggingConfiguration = null;
exports.getLoggingConfigurationOutput = null;
utilities.lazyLoad(exports, ["getLoggingConfiguration", "getLoggingConfigurationOutput"], () => require("./getLoggingConfiguration"));
exports.getRegexPatternSet = null;
exports.getRegexPatternSetOutput = null;
utilities.lazyLoad(exports, ["getRegexPatternSet", "getRegexPatternSetOutput"], () => require("./getRegexPatternSet"));
exports.getRuleGroup = null;
exports.getRuleGroupOutput = null;
utilities.lazyLoad(exports, ["getRuleGroup", "getRuleGroupOutput"], () => require("./getRuleGroup"));
exports.getWebACL = null;
exports.getWebACLOutput = null;
utilities.lazyLoad(exports, ["getWebACL", "getWebACLOutput"], () => require("./getWebACL"));
exports.IPSet = null;
utilities.lazyLoad(exports, ["IPSet"], () => require("./ipset"));
exports.LoggingConfiguration = null;
utilities.lazyLoad(exports, ["LoggingConfiguration"], () => require("./loggingConfiguration"));
exports.RegexPatternSet = null;
utilities.lazyLoad(exports, ["RegexPatternSet"], () => require("./regexPatternSet"));
exports.RuleGroup = null;
utilities.lazyLoad(exports, ["RuleGroup"], () => require("./ruleGroup"));
exports.WebACL = null;
utilities.lazyLoad(exports, ["WebACL"], () => require("./webACL"));
exports.WebACLAssociation = null;
utilities.lazyLoad(exports, ["WebACLAssociation"], () => require("./webACLAssociation"));
// Export enums:
__exportStar(require("../types/enums/wafv2"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:wafv2:IPSet":
                return new exports.IPSet(name, undefined, { urn });
            case "aws-native:wafv2:LoggingConfiguration":
                return new exports.LoggingConfiguration(name, undefined, { urn });
            case "aws-native:wafv2:RegexPatternSet":
                return new exports.RegexPatternSet(name, undefined, { urn });
            case "aws-native:wafv2:RuleGroup":
                return new exports.RuleGroup(name, undefined, { urn });
            case "aws-native:wafv2:WebACL":
                return new exports.WebACL(name, undefined, { urn });
            case "aws-native:wafv2:WebACLAssociation":
                return new exports.WebACLAssociation(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "wafv2", _module);
//# sourceMappingURL=index.js.map