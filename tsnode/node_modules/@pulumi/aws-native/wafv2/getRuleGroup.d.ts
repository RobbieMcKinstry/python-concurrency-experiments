import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
/**
 * Contains the Rules that identify the requests that you want to allow, block, or count. In a RuleGroup, you also specify a default action (ALLOW or BLOCK), and the action for each Rule that you add to a RuleGroup, for example, block requests from specified IP addresses or block requests from specified referrers. You also associate the RuleGroup with a CloudFront distribution to identify the requests that you want AWS WAF to filter. If you add more than one Rule to a RuleGroup, a request needs to match only one of the specifications to be allowed, blocked, or counted.
 */
export declare function getRuleGroup(args: GetRuleGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetRuleGroupResult>;
export interface GetRuleGroupArgs {
    id: string;
    name: string;
    scope: enums.wafv2.RuleGroupScope;
}
export interface GetRuleGroupResult {
    readonly arn?: string;
    /**
     * Collection of Available Labels.
     */
    readonly availableLabels?: outputs.wafv2.RuleGroupLabelSummary[];
    readonly capacity?: number;
    /**
     * Collection of Consumed Labels.
     */
    readonly consumedLabels?: outputs.wafv2.RuleGroupLabelSummary[];
    readonly customResponseBodies?: outputs.wafv2.RuleGroupCustomResponseBodies;
    readonly description?: string;
    readonly id?: string;
    readonly labelNamespace?: string;
    /**
     * Collection of Rules.
     */
    readonly rules?: outputs.wafv2.RuleGroupRule[];
    readonly tags?: outputs.wafv2.RuleGroupTag[];
    readonly visibilityConfig?: outputs.wafv2.RuleGroupVisibilityConfig;
}
export declare function getRuleGroupOutput(args: GetRuleGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRuleGroupResult>;
export interface GetRuleGroupOutputArgs {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
    scope: pulumi.Input<enums.wafv2.RuleGroupScope>;
}
