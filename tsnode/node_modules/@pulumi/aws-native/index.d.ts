export { CidrArgs, CidrResult, CidrOutputArgs } from "./cidr";
export declare const cidr: typeof import("./cidr").cidr;
export declare const cidrOutput: typeof import("./cidr").cidrOutput;
export { ExtensionResourceArgs } from "./extensionResource";
export declare type ExtensionResource = import("./extensionResource").ExtensionResource;
export declare const ExtensionResource: typeof import("./extensionResource").ExtensionResource;
export { GetAccountIdResult } from "./getAccountId";
export declare const getAccountId: typeof import("./getAccountId").getAccountId;
export { GetAzsArgs, GetAzsResult, GetAzsOutputArgs } from "./getAzs";
export declare const getAzs: typeof import("./getAzs").getAzs;
export declare const getAzsOutput: typeof import("./getAzs").getAzsOutput;
export { GetPartitionResult } from "./getPartition";
export declare const getPartition: typeof import("./getPartition").getPartition;
export { GetRegionResult } from "./getRegion";
export declare const getRegion: typeof import("./getRegion").getRegion;
export { GetSsmParameterListArgs, GetSsmParameterListResult, GetSsmParameterListOutputArgs } from "./getSsmParameterList";
export declare const getSsmParameterList: typeof import("./getSsmParameterList").getSsmParameterList;
export declare const getSsmParameterListOutput: typeof import("./getSsmParameterList").getSsmParameterListOutput;
export { GetSsmParameterStringArgs, GetSsmParameterStringResult, GetSsmParameterStringOutputArgs } from "./getSsmParameterString";
export declare const getSsmParameterString: typeof import("./getSsmParameterString").getSsmParameterString;
export declare const getSsmParameterStringOutput: typeof import("./getSsmParameterString").getSsmParameterStringOutput;
export { GetUrlSuffixResult } from "./getUrlSuffix";
export declare const getUrlSuffix: typeof import("./getUrlSuffix").getUrlSuffix;
export { ImportValueArgs, ImportValueResult, ImportValueOutputArgs } from "./importValue";
export declare const importValue: typeof import("./importValue").importValue;
export declare const importValueOutput: typeof import("./importValue").importValueOutput;
export { ProviderArgs } from "./provider";
export declare type Provider = import("./provider").Provider;
export declare const Provider: typeof import("./provider").Provider;
export * from "./types/enums";
import * as accessanalyzer from "./accessanalyzer";
import * as acmpca from "./acmpca";
import * as amazonmq from "./amazonmq";
import * as amplify from "./amplify";
import * as amplifyuibuilder from "./amplifyuibuilder";
import * as apigateway from "./apigateway";
import * as apigatewayv2 from "./apigatewayv2";
import * as appconfig from "./appconfig";
import * as appflow from "./appflow";
import * as appintegrations from "./appintegrations";
import * as applicationautoscaling from "./applicationautoscaling";
import * as applicationinsights from "./applicationinsights";
import * as appmesh from "./appmesh";
import * as apprunner from "./apprunner";
import * as appstream from "./appstream";
import * as appsync from "./appsync";
import * as aps from "./aps";
import * as ask from "./ask";
import * as athena from "./athena";
import * as auditmanager from "./auditmanager";
import * as autoscaling from "./autoscaling";
import * as autoscalingplans from "./autoscalingplans";
import * as backup from "./backup";
import * as batch from "./batch";
import * as billingconductor from "./billingconductor";
import * as budgets from "./budgets";
import * as cassandra from "./cassandra";
import * as ce from "./ce";
import * as certificatemanager from "./certificatemanager";
import * as chatbot from "./chatbot";
import * as cloud9 from "./cloud9";
import * as cloudformation from "./cloudformation";
import * as cloudfront from "./cloudfront";
import * as cloudtrail from "./cloudtrail";
import * as cloudwatch from "./cloudwatch";
import * as codeartifact from "./codeartifact";
import * as codebuild from "./codebuild";
import * as codecommit from "./codecommit";
import * as codedeploy from "./codedeploy";
import * as codeguruprofiler from "./codeguruprofiler";
import * as codegurureviewer from "./codegurureviewer";
import * as codepipeline from "./codepipeline";
import * as codestar from "./codestar";
import * as codestarconnections from "./codestarconnections";
import * as codestarnotifications from "./codestarnotifications";
import * as cognito from "./cognito";
import * as config from "./config";
import * as configuration from "./configuration";
import * as connect from "./connect";
import * as connectcampaigns from "./connectcampaigns";
import * as controltower from "./controltower";
import * as cur from "./cur";
import * as customerprofiles from "./customerprofiles";
import * as databrew from "./databrew";
import * as datapipeline from "./datapipeline";
import * as datasync from "./datasync";
import * as dax from "./dax";
import * as detective from "./detective";
import * as devicefarm from "./devicefarm";
import * as devopsguru from "./devopsguru";
import * as directoryservice from "./directoryservice";
import * as dlm from "./dlm";
import * as dms from "./dms";
import * as docdb from "./docdb";
import * as dynamodb from "./dynamodb";
import * as ec2 from "./ec2";
import * as ecr from "./ecr";
import * as ecs from "./ecs";
import * as efs from "./efs";
import * as eks from "./eks";
import * as elasticache from "./elasticache";
import * as elasticbeanstalk from "./elasticbeanstalk";
import * as elasticloadbalancing from "./elasticloadbalancing";
import * as elasticloadbalancingv2 from "./elasticloadbalancingv2";
import * as elasticsearch from "./elasticsearch";
import * as emr from "./emr";
import * as emrcontainers from "./emrcontainers";
import * as emrserverless from "./emrserverless";
import * as events from "./events";
import * as eventschemas from "./eventschemas";
import * as evidently from "./evidently";
import * as finspace from "./finspace";
import * as fis from "./fis";
import * as fms from "./fms";
import * as forecast from "./forecast";
import * as frauddetector from "./frauddetector";
import * as fsx from "./fsx";
import * as gamelift from "./gamelift";
import * as globalaccelerator from "./globalaccelerator";
import * as glue from "./glue";
import * as greengrass from "./greengrass";
import * as greengrassv2 from "./greengrassv2";
import * as groundstation from "./groundstation";
import * as guardduty from "./guardduty";
import * as healthlake from "./healthlake";
import * as iam from "./iam";
import * as identitystore from "./identitystore";
import * as imagebuilder from "./imagebuilder";
import * as inspector from "./inspector";
import * as inspectorv2 from "./inspectorv2";
import * as iot from "./iot";
import * as iot1click from "./iot1click";
import * as iotanalytics from "./iotanalytics";
import * as iotcoredeviceadvisor from "./iotcoredeviceadvisor";
import * as iotevents from "./iotevents";
import * as iotfleethub from "./iotfleethub";
import * as iotfleetwise from "./iotfleetwise";
import * as iotsitewise from "./iotsitewise";
import * as iotthingsgraph from "./iotthingsgraph";
import * as iottwinmaker from "./iottwinmaker";
import * as iotwireless from "./iotwireless";
import * as ivs from "./ivs";
import * as kafkaconnect from "./kafkaconnect";
import * as kendra from "./kendra";
import * as kinesis from "./kinesis";
import * as kinesisanalytics from "./kinesisanalytics";
import * as kinesisanalyticsv2 from "./kinesisanalyticsv2";
import * as kinesisfirehose from "./kinesisfirehose";
import * as kinesisvideo from "./kinesisvideo";
import * as kms from "./kms";
import * as lakeformation from "./lakeformation";
import * as lambda from "./lambda";
import * as lex from "./lex";
import * as licensemanager from "./licensemanager";
import * as lightsail from "./lightsail";
import * as location from "./location";
import * as logs from "./logs";
import * as lookoutequipment from "./lookoutequipment";
import * as lookoutmetrics from "./lookoutmetrics";
import * as lookoutvision from "./lookoutvision";
import * as m2 from "./m2";
import * as macie from "./macie";
import * as managedblockchain from "./managedblockchain";
import * as mediaconnect from "./mediaconnect";
import * as mediaconvert from "./mediaconvert";
import * as medialive from "./medialive";
import * as mediapackage from "./mediapackage";
import * as mediastore from "./mediastore";
import * as mediatailor from "./mediatailor";
import * as memorydb from "./memorydb";
import * as msk from "./msk";
import * as mwaa from "./mwaa";
import * as neptune from "./neptune";
import * as networkfirewall from "./networkfirewall";
import * as networkmanager from "./networkmanager";
import * as nimblestudio from "./nimblestudio";
import * as opensearchservice from "./opensearchservice";
import * as opsworks from "./opsworks";
import * as opsworkscm from "./opsworkscm";
import * as panorama from "./panorama";
import * as personalize from "./personalize";
import * as pinpoint from "./pinpoint";
import * as pinpointemail from "./pinpointemail";
import * as qldb from "./qldb";
import * as quicksight from "./quicksight";
import * as ram from "./ram";
import * as rds from "./rds";
import * as redshift from "./redshift";
import * as redshiftserverless from "./redshiftserverless";
import * as refactorspaces from "./refactorspaces";
import * as rekognition from "./rekognition";
import * as resiliencehub from "./resiliencehub";
import * as resourcegroups from "./resourcegroups";
import * as robomaker from "./robomaker";
import * as rolesanywhere from "./rolesanywhere";
import * as route53 from "./route53";
import * as route53recoverycontrol from "./route53recoverycontrol";
import * as route53recoveryreadiness from "./route53recoveryreadiness";
import * as route53resolver from "./route53resolver";
import * as rum from "./rum";
import * as s3 from "./s3";
import * as s3objectlambda from "./s3objectlambda";
import * as s3outposts from "./s3outposts";
import * as sagemaker from "./sagemaker";
import * as sdb from "./sdb";
import * as secretsmanager from "./secretsmanager";
import * as securityhub from "./securityhub";
import * as servicecatalog from "./servicecatalog";
import * as servicecatalogappregistry from "./servicecatalogappregistry";
import * as servicediscovery from "./servicediscovery";
import * as ses from "./ses";
import * as signer from "./signer";
import * as sns from "./sns";
import * as sqs from "./sqs";
import * as ssm from "./ssm";
import * as ssmcontacts from "./ssmcontacts";
import * as ssmincidents from "./ssmincidents";
import * as sso from "./sso";
import * as stepfunctions from "./stepfunctions";
import * as supportapp from "./supportapp";
import * as synthetics from "./synthetics";
import * as timestream from "./timestream";
import * as transfer from "./transfer";
import * as types from "./types";
import * as voiceid from "./voiceid";
import * as waf from "./waf";
import * as wafregional from "./wafregional";
import * as wafv2 from "./wafv2";
import * as wisdom from "./wisdom";
import * as workspaces from "./workspaces";
import * as xray from "./xray";
export { accessanalyzer, acmpca, amazonmq, amplify, amplifyuibuilder, apigateway, apigatewayv2, appconfig, appflow, appintegrations, applicationautoscaling, applicationinsights, appmesh, apprunner, appstream, appsync, aps, ask, athena, auditmanager, autoscaling, autoscalingplans, backup, batch, billingconductor, budgets, cassandra, ce, certificatemanager, chatbot, cloud9, cloudformation, cloudfront, cloudtrail, cloudwatch, codeartifact, codebuild, codecommit, codedeploy, codeguruprofiler, codegurureviewer, codepipeline, codestar, codestarconnections, codestarnotifications, cognito, config, configuration, connect, connectcampaigns, controltower, cur, customerprofiles, databrew, datapipeline, datasync, dax, detective, devicefarm, devopsguru, directoryservice, dlm, dms, docdb, dynamodb, ec2, ecr, ecs, efs, eks, elasticache, elasticbeanstalk, elasticloadbalancing, elasticloadbalancingv2, elasticsearch, emr, emrcontainers, emrserverless, events, eventschemas, evidently, finspace, fis, fms, forecast, frauddetector, fsx, gamelift, globalaccelerator, glue, greengrass, greengrassv2, groundstation, guardduty, healthlake, iam, identitystore, imagebuilder, inspector, inspectorv2, iot, iot1click, iotanalytics, iotcoredeviceadvisor, iotevents, iotfleethub, iotfleetwise, iotsitewise, iotthingsgraph, iottwinmaker, iotwireless, ivs, kafkaconnect, kendra, kinesis, kinesisanalytics, kinesisanalyticsv2, kinesisfirehose, kinesisvideo, kms, lakeformation, lambda, lex, licensemanager, lightsail, location, logs, lookoutequipment, lookoutmetrics, lookoutvision, m2, macie, managedblockchain, mediaconnect, mediaconvert, medialive, mediapackage, mediastore, mediatailor, memorydb, msk, mwaa, neptune, networkfirewall, networkmanager, nimblestudio, opensearchservice, opsworks, opsworkscm, panorama, personalize, pinpoint, pinpointemail, qldb, quicksight, ram, rds, redshift, redshiftserverless, refactorspaces, rekognition, resiliencehub, resourcegroups, robomaker, rolesanywhere, route53, route53recoverycontrol, route53recoveryreadiness, route53resolver, rum, s3, s3objectlambda, s3outposts, sagemaker, sdb, secretsmanager, securityhub, servicecatalog, servicecatalogappregistry, servicediscovery, ses, signer, sns, sqs, ssm, ssmcontacts, ssmincidents, sso, stepfunctions, supportapp, synthetics, timestream, transfer, types, voiceid, waf, wafregional, wafv2, wisdom, workspaces, xray, };
