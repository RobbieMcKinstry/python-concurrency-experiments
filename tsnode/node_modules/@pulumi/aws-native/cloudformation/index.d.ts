export { CustomResourceArgs } from "./customResource";
export declare type CustomResource = import("./customResource").CustomResource;
export declare const CustomResource: typeof import("./customResource").CustomResource;
export { GetCustomResourceArgs, GetCustomResourceResult, GetCustomResourceOutputArgs } from "./getCustomResource";
export declare const getCustomResource: typeof import("./getCustomResource").getCustomResource;
export declare const getCustomResourceOutput: typeof import("./getCustomResource").getCustomResourceOutput;
export { GetHookDefaultVersionArgs, GetHookDefaultVersionResult, GetHookDefaultVersionOutputArgs } from "./getHookDefaultVersion";
export declare const getHookDefaultVersion: typeof import("./getHookDefaultVersion").getHookDefaultVersion;
export declare const getHookDefaultVersionOutput: typeof import("./getHookDefaultVersion").getHookDefaultVersionOutput;
export { GetHookTypeConfigArgs, GetHookTypeConfigResult, GetHookTypeConfigOutputArgs } from "./getHookTypeConfig";
export declare const getHookTypeConfig: typeof import("./getHookTypeConfig").getHookTypeConfig;
export declare const getHookTypeConfigOutput: typeof import("./getHookTypeConfig").getHookTypeConfigOutput;
export { GetHookVersionArgs, GetHookVersionResult, GetHookVersionOutputArgs } from "./getHookVersion";
export declare const getHookVersion: typeof import("./getHookVersion").getHookVersion;
export declare const getHookVersionOutput: typeof import("./getHookVersion").getHookVersionOutput;
export { GetMacroArgs, GetMacroResult, GetMacroOutputArgs } from "./getMacro";
export declare const getMacro: typeof import("./getMacro").getMacro;
export declare const getMacroOutput: typeof import("./getMacro").getMacroOutput;
export { GetModuleVersionArgs, GetModuleVersionResult, GetModuleVersionOutputArgs } from "./getModuleVersion";
export declare const getModuleVersion: typeof import("./getModuleVersion").getModuleVersion;
export declare const getModuleVersionOutput: typeof import("./getModuleVersion").getModuleVersionOutput;
export { GetPublicTypeVersionArgs, GetPublicTypeVersionResult, GetPublicTypeVersionOutputArgs } from "./getPublicTypeVersion";
export declare const getPublicTypeVersion: typeof import("./getPublicTypeVersion").getPublicTypeVersion;
export declare const getPublicTypeVersionOutput: typeof import("./getPublicTypeVersion").getPublicTypeVersionOutput;
export { GetPublisherArgs, GetPublisherResult, GetPublisherOutputArgs } from "./getPublisher";
export declare const getPublisher: typeof import("./getPublisher").getPublisher;
export declare const getPublisherOutput: typeof import("./getPublisher").getPublisherOutput;
export { GetResourceDefaultVersionArgs, GetResourceDefaultVersionResult, GetResourceDefaultVersionOutputArgs } from "./getResourceDefaultVersion";
export declare const getResourceDefaultVersion: typeof import("./getResourceDefaultVersion").getResourceDefaultVersion;
export declare const getResourceDefaultVersionOutput: typeof import("./getResourceDefaultVersion").getResourceDefaultVersionOutput;
export { GetResourceVersionArgs, GetResourceVersionResult, GetResourceVersionOutputArgs } from "./getResourceVersion";
export declare const getResourceVersion: typeof import("./getResourceVersion").getResourceVersion;
export declare const getResourceVersionOutput: typeof import("./getResourceVersion").getResourceVersionOutput;
export { GetStackArgs, GetStackResult, GetStackOutputArgs } from "./getStack";
export declare const getStack: typeof import("./getStack").getStack;
export declare const getStackOutput: typeof import("./getStack").getStackOutput;
export { GetStackSetArgs, GetStackSetResult, GetStackSetOutputArgs } from "./getStackSet";
export declare const getStackSet: typeof import("./getStackSet").getStackSet;
export declare const getStackSetOutput: typeof import("./getStackSet").getStackSetOutput;
export { GetTypeActivationArgs, GetTypeActivationResult, GetTypeActivationOutputArgs } from "./getTypeActivation";
export declare const getTypeActivation: typeof import("./getTypeActivation").getTypeActivation;
export declare const getTypeActivationOutput: typeof import("./getTypeActivation").getTypeActivationOutput;
export { GetWaitConditionArgs, GetWaitConditionResult, GetWaitConditionOutputArgs } from "./getWaitCondition";
export declare const getWaitCondition: typeof import("./getWaitCondition").getWaitCondition;
export declare const getWaitConditionOutput: typeof import("./getWaitCondition").getWaitConditionOutput;
export { GetWaitConditionHandleArgs, GetWaitConditionHandleResult, GetWaitConditionHandleOutputArgs } from "./getWaitConditionHandle";
export declare const getWaitConditionHandle: typeof import("./getWaitConditionHandle").getWaitConditionHandle;
export declare const getWaitConditionHandleOutput: typeof import("./getWaitConditionHandle").getWaitConditionHandleOutput;
export { HookDefaultVersionArgs } from "./hookDefaultVersion";
export declare type HookDefaultVersion = import("./hookDefaultVersion").HookDefaultVersion;
export declare const HookDefaultVersion: typeof import("./hookDefaultVersion").HookDefaultVersion;
export { HookTypeConfigArgs } from "./hookTypeConfig";
export declare type HookTypeConfig = import("./hookTypeConfig").HookTypeConfig;
export declare const HookTypeConfig: typeof import("./hookTypeConfig").HookTypeConfig;
export { HookVersionArgs } from "./hookVersion";
export declare type HookVersion = import("./hookVersion").HookVersion;
export declare const HookVersion: typeof import("./hookVersion").HookVersion;
export { MacroArgs } from "./macro";
export declare type Macro = import("./macro").Macro;
export declare const Macro: typeof import("./macro").Macro;
export { ModuleDefaultVersionArgs } from "./moduleDefaultVersion";
export declare type ModuleDefaultVersion = import("./moduleDefaultVersion").ModuleDefaultVersion;
export declare const ModuleDefaultVersion: typeof import("./moduleDefaultVersion").ModuleDefaultVersion;
export { ModuleVersionArgs } from "./moduleVersion";
export declare type ModuleVersion = import("./moduleVersion").ModuleVersion;
export declare const ModuleVersion: typeof import("./moduleVersion").ModuleVersion;
export { PublicTypeVersionArgs } from "./publicTypeVersion";
export declare type PublicTypeVersion = import("./publicTypeVersion").PublicTypeVersion;
export declare const PublicTypeVersion: typeof import("./publicTypeVersion").PublicTypeVersion;
export { PublisherArgs } from "./publisher";
export declare type Publisher = import("./publisher").Publisher;
export declare const Publisher: typeof import("./publisher").Publisher;
export { ResourceDefaultVersionArgs } from "./resourceDefaultVersion";
export declare type ResourceDefaultVersion = import("./resourceDefaultVersion").ResourceDefaultVersion;
export declare const ResourceDefaultVersion: typeof import("./resourceDefaultVersion").ResourceDefaultVersion;
export { ResourceVersionArgs } from "./resourceVersion";
export declare type ResourceVersion = import("./resourceVersion").ResourceVersion;
export declare const ResourceVersion: typeof import("./resourceVersion").ResourceVersion;
export { StackArgs } from "./stack";
export declare type Stack = import("./stack").Stack;
export declare const Stack: typeof import("./stack").Stack;
export { StackSetArgs } from "./stackSet";
export declare type StackSet = import("./stackSet").StackSet;
export declare const StackSet: typeof import("./stackSet").StackSet;
export { TypeActivationArgs } from "./typeActivation";
export declare type TypeActivation = import("./typeActivation").TypeActivation;
export declare const TypeActivation: typeof import("./typeActivation").TypeActivation;
export { WaitConditionArgs } from "./waitCondition";
export declare type WaitCondition = import("./waitCondition").WaitCondition;
export declare const WaitCondition: typeof import("./waitCondition").WaitCondition;
export { WaitConditionHandleArgs } from "./waitConditionHandle";
export declare type WaitConditionHandle = import("./waitConditionHandle").WaitConditionHandle;
export declare const WaitConditionHandle: typeof import("./waitConditionHandle").WaitConditionHandle;
export * from "../types/enums/cloudformation";
