"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Endpoint = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Type definition for AWS::DMS::Endpoint
 *
 * @deprecated Endpoint is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
class Endpoint extends pulumi.CustomResource {
    /**
     * Create a Endpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated Endpoint is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name, args, opts) {
        pulumi.log.warn("Endpoint is deprecated: Endpoint is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.");
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.endpointType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointType'");
            }
            if ((!args || args.engineName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineName'");
            }
            resourceInputs["certificateArn"] = args ? args.certificateArn : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["docDbSettings"] = args ? args.docDbSettings : undefined;
            resourceInputs["dynamoDbSettings"] = args ? args.dynamoDbSettings : undefined;
            resourceInputs["elasticsearchSettings"] = args ? args.elasticsearchSettings : undefined;
            resourceInputs["endpointIdentifier"] = args ? args.endpointIdentifier : undefined;
            resourceInputs["endpointType"] = args ? args.endpointType : undefined;
            resourceInputs["engineName"] = args ? args.engineName : undefined;
            resourceInputs["extraConnectionAttributes"] = args ? args.extraConnectionAttributes : undefined;
            resourceInputs["gcpMySQLSettings"] = args ? args.gcpMySQLSettings : undefined;
            resourceInputs["ibmDb2Settings"] = args ? args.ibmDb2Settings : undefined;
            resourceInputs["kafkaSettings"] = args ? args.kafkaSettings : undefined;
            resourceInputs["kinesisSettings"] = args ? args.kinesisSettings : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["microsoftSqlServerSettings"] = args ? args.microsoftSqlServerSettings : undefined;
            resourceInputs["mongoDbSettings"] = args ? args.mongoDbSettings : undefined;
            resourceInputs["mySqlSettings"] = args ? args.mySqlSettings : undefined;
            resourceInputs["neptuneSettings"] = args ? args.neptuneSettings : undefined;
            resourceInputs["oracleSettings"] = args ? args.oracleSettings : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["postgreSqlSettings"] = args ? args.postgreSqlSettings : undefined;
            resourceInputs["redisSettings"] = args ? args.redisSettings : undefined;
            resourceInputs["redshiftSettings"] = args ? args.redshiftSettings : undefined;
            resourceInputs["resourceIdentifier"] = args ? args.resourceIdentifier : undefined;
            resourceInputs["s3Settings"] = args ? args.s3Settings : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["sslMode"] = args ? args.sslMode : undefined;
            resourceInputs["sybaseSettings"] = args ? args.sybaseSettings : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["externalId"] = undefined /*out*/;
        }
        else {
            resourceInputs["certificateArn"] = undefined /*out*/;
            resourceInputs["databaseName"] = undefined /*out*/;
            resourceInputs["docDbSettings"] = undefined /*out*/;
            resourceInputs["dynamoDbSettings"] = undefined /*out*/;
            resourceInputs["elasticsearchSettings"] = undefined /*out*/;
            resourceInputs["endpointIdentifier"] = undefined /*out*/;
            resourceInputs["endpointType"] = undefined /*out*/;
            resourceInputs["engineName"] = undefined /*out*/;
            resourceInputs["externalId"] = undefined /*out*/;
            resourceInputs["extraConnectionAttributes"] = undefined /*out*/;
            resourceInputs["gcpMySQLSettings"] = undefined /*out*/;
            resourceInputs["ibmDb2Settings"] = undefined /*out*/;
            resourceInputs["kafkaSettings"] = undefined /*out*/;
            resourceInputs["kinesisSettings"] = undefined /*out*/;
            resourceInputs["kmsKeyId"] = undefined /*out*/;
            resourceInputs["microsoftSqlServerSettings"] = undefined /*out*/;
            resourceInputs["mongoDbSettings"] = undefined /*out*/;
            resourceInputs["mySqlSettings"] = undefined /*out*/;
            resourceInputs["neptuneSettings"] = undefined /*out*/;
            resourceInputs["oracleSettings"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["postgreSqlSettings"] = undefined /*out*/;
            resourceInputs["redisSettings"] = undefined /*out*/;
            resourceInputs["redshiftSettings"] = undefined /*out*/;
            resourceInputs["resourceIdentifier"] = undefined /*out*/;
            resourceInputs["s3Settings"] = undefined /*out*/;
            resourceInputs["serverName"] = undefined /*out*/;
            resourceInputs["sslMode"] = undefined /*out*/;
            resourceInputs["sybaseSettings"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["username"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Endpoint.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Endpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        pulumi.log.warn("Endpoint is deprecated: Endpoint is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.");
        return new Endpoint(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Endpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Endpoint.__pulumiType;
    }
}
exports.Endpoint = Endpoint;
/** @internal */
Endpoint.__pulumiType = 'aws-native:dms:Endpoint';
//# sourceMappingURL=endpoint.js.map