"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReplicationInstance = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Type definition for AWS::DMS::ReplicationInstance
 *
 * @deprecated ReplicationInstance is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.
 */
class ReplicationInstance extends pulumi.CustomResource {
    /**
     * Create a ReplicationInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated ReplicationInstance is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible. */
    constructor(name, args, opts) {
        pulumi.log.warn("ReplicationInstance is deprecated: ReplicationInstance is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.");
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.replicationInstanceClass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicationInstanceClass'");
            }
            resourceInputs["allocatedStorage"] = args ? args.allocatedStorage : undefined;
            resourceInputs["allowMajorVersionUpgrade"] = args ? args.allowMajorVersionUpgrade : undefined;
            resourceInputs["autoMinorVersionUpgrade"] = args ? args.autoMinorVersionUpgrade : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["multiAZ"] = args ? args.multiAZ : undefined;
            resourceInputs["preferredMaintenanceWindow"] = args ? args.preferredMaintenanceWindow : undefined;
            resourceInputs["publiclyAccessible"] = args ? args.publiclyAccessible : undefined;
            resourceInputs["replicationInstanceClass"] = args ? args.replicationInstanceClass : undefined;
            resourceInputs["replicationInstanceIdentifier"] = args ? args.replicationInstanceIdentifier : undefined;
            resourceInputs["replicationSubnetGroupIdentifier"] = args ? args.replicationSubnetGroupIdentifier : undefined;
            resourceInputs["resourceIdentifier"] = args ? args.resourceIdentifier : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcSecurityGroupIds"] = args ? args.vpcSecurityGroupIds : undefined;
            resourceInputs["replicationInstancePrivateIpAddresses"] = undefined /*out*/;
            resourceInputs["replicationInstancePublicIpAddresses"] = undefined /*out*/;
        }
        else {
            resourceInputs["allocatedStorage"] = undefined /*out*/;
            resourceInputs["allowMajorVersionUpgrade"] = undefined /*out*/;
            resourceInputs["autoMinorVersionUpgrade"] = undefined /*out*/;
            resourceInputs["availabilityZone"] = undefined /*out*/;
            resourceInputs["engineVersion"] = undefined /*out*/;
            resourceInputs["kmsKeyId"] = undefined /*out*/;
            resourceInputs["multiAZ"] = undefined /*out*/;
            resourceInputs["preferredMaintenanceWindow"] = undefined /*out*/;
            resourceInputs["publiclyAccessible"] = undefined /*out*/;
            resourceInputs["replicationInstanceClass"] = undefined /*out*/;
            resourceInputs["replicationInstanceIdentifier"] = undefined /*out*/;
            resourceInputs["replicationInstancePrivateIpAddresses"] = undefined /*out*/;
            resourceInputs["replicationInstancePublicIpAddresses"] = undefined /*out*/;
            resourceInputs["replicationSubnetGroupIdentifier"] = undefined /*out*/;
            resourceInputs["resourceIdentifier"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["vpcSecurityGroupIds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReplicationInstance.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ReplicationInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        pulumi.log.warn("ReplicationInstance is deprecated: ReplicationInstance is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.");
        return new ReplicationInstance(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ReplicationInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReplicationInstance.__pulumiType;
    }
}
exports.ReplicationInstance = ReplicationInstance;
/** @internal */
ReplicationInstance.__pulumiType = 'aws-native:dms:ReplicationInstance';
//# sourceMappingURL=replicationInstance.js.map