import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * Resource schema for AWS::EMRServerless::Application Type
 */
export declare function getApplication(args: GetApplicationArgs, opts?: pulumi.InvokeOptions): Promise<GetApplicationResult>;
export interface GetApplicationArgs {
    /**
     * The ID of the EMR Serverless Application.
     */
    applicationId: string;
}
export interface GetApplicationResult {
    /**
     * The ID of the EMR Serverless Application.
     */
    readonly applicationId?: string;
    /**
     * The Amazon Resource Name (ARN) of the EMR Serverless Application.
     */
    readonly arn?: string;
    /**
     * Configuration for Auto Start of Application.
     */
    readonly autoStartConfiguration?: outputs.emrserverless.ApplicationAutoStartConfiguration;
    /**
     * Configuration for Auto Stop of Application.
     */
    readonly autoStopConfiguration?: outputs.emrserverless.ApplicationAutoStopConfiguration;
    /**
     * Initial capacity initialized when an Application is started.
     */
    readonly initialCapacity?: outputs.emrserverless.ApplicationInitialCapacityConfigKeyValuePair[];
    /**
     * Maximum allowed cumulative resources for an Application. No new resources will be created once the limit is hit.
     */
    readonly maximumCapacity?: outputs.emrserverless.ApplicationMaximumAllowedResources;
    /**
     * Network Configuration for customer VPC connectivity.
     */
    readonly networkConfiguration?: outputs.emrserverless.ApplicationNetworkConfiguration;
    /**
     * Tag map with key and value
     */
    readonly tags?: outputs.emrserverless.ApplicationTag[];
}
export declare function getApplicationOutput(args: GetApplicationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplicationResult>;
export interface GetApplicationOutputArgs {
    /**
     * The ID of the EMR Serverless Application.
     */
    applicationId: pulumi.Input<string>;
}
