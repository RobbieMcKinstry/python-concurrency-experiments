"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDetectorModelOutput = exports.getDetectorModel = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The AWS::IoTEvents::DetectorModel resource creates a detector model. You create a *detector model* (a model of your equipment or process) using *states*. For each state, you define conditional (Boolean) logic that evaluates the incoming inputs to detect significant events. When an event is detected, it can change the state or trigger custom-built or predefined actions using other AWS services. You can define additional events that trigger actions when entering or exiting a state and, optionally, when a condition is met. For more information, see [How to Use AWS IoT Events](https://docs.aws.amazon.com/iotevents/latest/developerguide/how-to-use-iotevents.html) in the *AWS IoT Events Developer Guide*.
 */
function getDetectorModel(args, opts) {
    if (!opts) {
        opts = {};
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aws-native:iotevents:getDetectorModel", {
        "detectorModelName": args.detectorModelName,
    }, opts);
}
exports.getDetectorModel = getDetectorModel;
function getDetectorModelOutput(args, opts) {
    return pulumi.output(args).apply(a => getDetectorModel(a, opts));
}
exports.getDetectorModelOutput = getDetectorModelOutput;
//# sourceMappingURL=getDetectorModel.js.map