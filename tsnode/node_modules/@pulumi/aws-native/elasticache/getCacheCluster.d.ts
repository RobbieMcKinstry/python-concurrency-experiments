import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * Resource Type definition for AWS::ElastiCache::CacheCluster
 */
export declare function getCacheCluster(args: GetCacheClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetCacheClusterResult>;
export interface GetCacheClusterArgs {
    id: string;
}
export interface GetCacheClusterResult {
    readonly aZMode?: string;
    readonly autoMinorVersionUpgrade?: boolean;
    readonly cacheNodeType?: string;
    readonly cacheParameterGroupName?: string;
    readonly cacheSecurityGroupNames?: string[];
    readonly configurationEndpointAddress?: string;
    readonly configurationEndpointPort?: string;
    readonly engineVersion?: string;
    readonly id?: string;
    readonly logDeliveryConfigurations?: outputs.elasticache.CacheClusterLogDeliveryConfigurationRequest[];
    readonly notificationTopicArn?: string;
    readonly numCacheNodes?: number;
    readonly preferredAvailabilityZone?: string;
    readonly preferredAvailabilityZones?: string[];
    readonly preferredMaintenanceWindow?: string;
    readonly redisEndpointAddress?: string;
    readonly redisEndpointPort?: string;
    readonly snapshotRetentionLimit?: number;
    readonly snapshotWindow?: string;
    readonly tags?: outputs.elasticache.CacheClusterTag[];
    readonly transitEncryptionEnabled?: boolean;
    readonly vpcSecurityGroupIds?: string[];
}
export declare function getCacheClusterOutput(args: GetCacheClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCacheClusterResult>;
export interface GetCacheClusterOutputArgs {
    id: pulumi.Input<string>;
}
