"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionGroup = exports.GlobalCluster = exports.getOptionGroupOutput = exports.getOptionGroup = exports.getGlobalClusterOutput = exports.getGlobalCluster = exports.getEventSubscriptionOutput = exports.getEventSubscription = exports.getDBSubnetGroupOutput = exports.getDBSubnetGroup = exports.getDBSecurityGroupIngressOutput = exports.getDBSecurityGroupIngress = exports.getDBSecurityGroupOutput = exports.getDBSecurityGroup = exports.getDBProxyTargetGroupOutput = exports.getDBProxyTargetGroup = exports.getDBProxyEndpointOutput = exports.getDBProxyEndpoint = exports.getDBProxyOutput = exports.getDBProxy = exports.getDBParameterGroupOutput = exports.getDBParameterGroup = exports.getDBInstanceOutput = exports.getDBInstance = exports.getDBClusterParameterGroupOutput = exports.getDBClusterParameterGroup = exports.getDBClusterOutput = exports.getDBCluster = exports.EventSubscription = exports.DBSubnetGroup = exports.DBSecurityGroupIngress = exports.DBSecurityGroup = exports.DBProxyTargetGroup = exports.DBProxyEndpoint = exports.DBProxy = exports.DBParameterGroup = exports.DBInstance = exports.DBClusterParameterGroup = exports.DBCluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.DBCluster = null;
utilities.lazyLoad(exports, ["DBCluster"], () => require("./dbcluster"));
exports.DBClusterParameterGroup = null;
utilities.lazyLoad(exports, ["DBClusterParameterGroup"], () => require("./dbclusterParameterGroup"));
exports.DBInstance = null;
utilities.lazyLoad(exports, ["DBInstance"], () => require("./dbinstance"));
exports.DBParameterGroup = null;
utilities.lazyLoad(exports, ["DBParameterGroup"], () => require("./dbparameterGroup"));
exports.DBProxy = null;
utilities.lazyLoad(exports, ["DBProxy"], () => require("./dbproxy"));
exports.DBProxyEndpoint = null;
utilities.lazyLoad(exports, ["DBProxyEndpoint"], () => require("./dbproxyEndpoint"));
exports.DBProxyTargetGroup = null;
utilities.lazyLoad(exports, ["DBProxyTargetGroup"], () => require("./dbproxyTargetGroup"));
exports.DBSecurityGroup = null;
utilities.lazyLoad(exports, ["DBSecurityGroup"], () => require("./dbsecurityGroup"));
exports.DBSecurityGroupIngress = null;
utilities.lazyLoad(exports, ["DBSecurityGroupIngress"], () => require("./dbsecurityGroupIngress"));
exports.DBSubnetGroup = null;
utilities.lazyLoad(exports, ["DBSubnetGroup"], () => require("./dbsubnetGroup"));
exports.EventSubscription = null;
utilities.lazyLoad(exports, ["EventSubscription"], () => require("./eventSubscription"));
exports.getDBCluster = null;
exports.getDBClusterOutput = null;
utilities.lazyLoad(exports, ["getDBCluster", "getDBClusterOutput"], () => require("./getDBCluster"));
exports.getDBClusterParameterGroup = null;
exports.getDBClusterParameterGroupOutput = null;
utilities.lazyLoad(exports, ["getDBClusterParameterGroup", "getDBClusterParameterGroupOutput"], () => require("./getDBClusterParameterGroup"));
exports.getDBInstance = null;
exports.getDBInstanceOutput = null;
utilities.lazyLoad(exports, ["getDBInstance", "getDBInstanceOutput"], () => require("./getDBInstance"));
exports.getDBParameterGroup = null;
exports.getDBParameterGroupOutput = null;
utilities.lazyLoad(exports, ["getDBParameterGroup", "getDBParameterGroupOutput"], () => require("./getDBParameterGroup"));
exports.getDBProxy = null;
exports.getDBProxyOutput = null;
utilities.lazyLoad(exports, ["getDBProxy", "getDBProxyOutput"], () => require("./getDBProxy"));
exports.getDBProxyEndpoint = null;
exports.getDBProxyEndpointOutput = null;
utilities.lazyLoad(exports, ["getDBProxyEndpoint", "getDBProxyEndpointOutput"], () => require("./getDBProxyEndpoint"));
exports.getDBProxyTargetGroup = null;
exports.getDBProxyTargetGroupOutput = null;
utilities.lazyLoad(exports, ["getDBProxyTargetGroup", "getDBProxyTargetGroupOutput"], () => require("./getDBProxyTargetGroup"));
exports.getDBSecurityGroup = null;
exports.getDBSecurityGroupOutput = null;
utilities.lazyLoad(exports, ["getDBSecurityGroup", "getDBSecurityGroupOutput"], () => require("./getDBSecurityGroup"));
exports.getDBSecurityGroupIngress = null;
exports.getDBSecurityGroupIngressOutput = null;
utilities.lazyLoad(exports, ["getDBSecurityGroupIngress", "getDBSecurityGroupIngressOutput"], () => require("./getDBSecurityGroupIngress"));
exports.getDBSubnetGroup = null;
exports.getDBSubnetGroupOutput = null;
utilities.lazyLoad(exports, ["getDBSubnetGroup", "getDBSubnetGroupOutput"], () => require("./getDBSubnetGroup"));
exports.getEventSubscription = null;
exports.getEventSubscriptionOutput = null;
utilities.lazyLoad(exports, ["getEventSubscription", "getEventSubscriptionOutput"], () => require("./getEventSubscription"));
exports.getGlobalCluster = null;
exports.getGlobalClusterOutput = null;
utilities.lazyLoad(exports, ["getGlobalCluster", "getGlobalClusterOutput"], () => require("./getGlobalCluster"));
exports.getOptionGroup = null;
exports.getOptionGroupOutput = null;
utilities.lazyLoad(exports, ["getOptionGroup", "getOptionGroupOutput"], () => require("./getOptionGroup"));
exports.GlobalCluster = null;
utilities.lazyLoad(exports, ["GlobalCluster"], () => require("./globalCluster"));
exports.OptionGroup = null;
utilities.lazyLoad(exports, ["OptionGroup"], () => require("./optionGroup"));
// Export enums:
__exportStar(require("../types/enums/rds"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:rds:DBCluster":
                return new exports.DBCluster(name, undefined, { urn });
            case "aws-native:rds:DBClusterParameterGroup":
                return new exports.DBClusterParameterGroup(name, undefined, { urn });
            case "aws-native:rds:DBInstance":
                return new exports.DBInstance(name, undefined, { urn });
            case "aws-native:rds:DBParameterGroup":
                return new exports.DBParameterGroup(name, undefined, { urn });
            case "aws-native:rds:DBProxy":
                return new exports.DBProxy(name, undefined, { urn });
            case "aws-native:rds:DBProxyEndpoint":
                return new exports.DBProxyEndpoint(name, undefined, { urn });
            case "aws-native:rds:DBProxyTargetGroup":
                return new exports.DBProxyTargetGroup(name, undefined, { urn });
            case "aws-native:rds:DBSecurityGroup":
                return new exports.DBSecurityGroup(name, undefined, { urn });
            case "aws-native:rds:DBSecurityGroupIngress":
                return new exports.DBSecurityGroupIngress(name, undefined, { urn });
            case "aws-native:rds:DBSubnetGroup":
                return new exports.DBSubnetGroup(name, undefined, { urn });
            case "aws-native:rds:EventSubscription":
                return new exports.EventSubscription(name, undefined, { urn });
            case "aws-native:rds:GlobalCluster":
                return new exports.GlobalCluster(name, undefined, { urn });
            case "aws-native:rds:OptionGroup":
                return new exports.OptionGroup(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "rds", _module);
//# sourceMappingURL=index.js.map