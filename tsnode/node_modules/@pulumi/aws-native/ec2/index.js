"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHostOutput = exports.getHost = exports.getGatewayRouteTableAssociationOutput = exports.getGatewayRouteTableAssociation = exports.getFlowLogOutput = exports.getFlowLog = exports.getEnclaveCertificateIamRoleAssociationOutput = exports.getEnclaveCertificateIamRoleAssociation = exports.getEgressOnlyInternetGatewayOutput = exports.getEgressOnlyInternetGateway = exports.getEIPAssociationOutput = exports.getEIPAssociation = exports.getEIPOutput = exports.getEIP = exports.getEC2FleetOutput = exports.getEC2Fleet = exports.getDHCPOptionsOutput = exports.getDHCPOptions = exports.getCustomerGatewayOutput = exports.getCustomerGateway = exports.getClientVpnTargetNetworkAssociationOutput = exports.getClientVpnTargetNetworkAssociation = exports.getClientVpnRouteOutput = exports.getClientVpnRoute = exports.getClientVpnEndpointOutput = exports.getClientVpnEndpoint = exports.getClientVpnAuthorizationRuleOutput = exports.getClientVpnAuthorizationRule = exports.getCarrierGatewayOutput = exports.getCarrierGateway = exports.getCapacityReservationFleetOutput = exports.getCapacityReservationFleet = exports.getCapacityReservationOutput = exports.getCapacityReservation = exports.GatewayRouteTableAssociation = exports.FlowLog = exports.EnclaveCertificateIamRoleAssociation = exports.EIPAssociation = exports.EIP = exports.EgressOnlyInternetGateway = exports.EC2Fleet = exports.DHCPOptions = exports.CustomerGateway = exports.ClientVpnTargetNetworkAssociation = exports.ClientVpnRoute = exports.ClientVpnEndpoint = exports.ClientVpnAuthorizationRule = exports.CarrierGateway = exports.CapacityReservationFleet = exports.CapacityReservation = void 0;
exports.getSecurityGroupOutput = exports.getSecurityGroup = exports.getRouteTableOutput = exports.getRouteTable = exports.getRouteOutput = exports.getRoute = exports.getPrefixListOutput = exports.getPrefixList = exports.getPlacementGroupOutput = exports.getPlacementGroup = exports.getNetworkInterfacePermissionOutput = exports.getNetworkInterfacePermission = exports.getNetworkInterfaceAttachmentOutput = exports.getNetworkInterfaceAttachment = exports.getNetworkInterfaceOutput = exports.getNetworkInterface = exports.getNetworkInsightsPathOutput = exports.getNetworkInsightsPath = exports.getNetworkInsightsAnalysisOutput = exports.getNetworkInsightsAnalysis = exports.getNetworkInsightsAccessScopeAnalysisOutput = exports.getNetworkInsightsAccessScopeAnalysis = exports.getNetworkInsightsAccessScopeOutput = exports.getNetworkInsightsAccessScope = exports.getNetworkAclEntryOutput = exports.getNetworkAclEntry = exports.getNetworkAclOutput = exports.getNetworkAcl = exports.getNatGatewayOutput = exports.getNatGateway = exports.getLocalGatewayRouteTableVPCAssociationOutput = exports.getLocalGatewayRouteTableVPCAssociation = exports.getLocalGatewayRouteOutput = exports.getLocalGatewayRoute = exports.getLaunchTemplateOutput = exports.getLaunchTemplate = exports.getKeyPairOutput = exports.getKeyPair = exports.getInternetGatewayOutput = exports.getInternetGateway = exports.getInstanceOutput = exports.getInstance = exports.getIPAMScopeOutput = exports.getIPAMScope = exports.getIPAMPoolOutput = exports.getIPAMPool = exports.getIPAMAllocationOutput = exports.getIPAMAllocation = exports.getIPAMOutput = exports.getIPAM = void 0;
exports.getVPCOutput = exports.getVPC = exports.getTransitGatewayVpcAttachmentOutput = exports.getTransitGatewayVpcAttachment = exports.getTransitGatewayRouteTablePropagationOutput = exports.getTransitGatewayRouteTablePropagation = exports.getTransitGatewayRouteTableAssociationOutput = exports.getTransitGatewayRouteTableAssociation = exports.getTransitGatewayRouteTableOutput = exports.getTransitGatewayRouteTable = exports.getTransitGatewayRouteOutput = exports.getTransitGatewayRoute = exports.getTransitGatewayPeeringAttachmentOutput = exports.getTransitGatewayPeeringAttachment = exports.getTransitGatewayMulticastGroupSourceOutput = exports.getTransitGatewayMulticastGroupSource = exports.getTransitGatewayMulticastGroupMemberOutput = exports.getTransitGatewayMulticastGroupMember = exports.getTransitGatewayMulticastDomainAssociationOutput = exports.getTransitGatewayMulticastDomainAssociation = exports.getTransitGatewayMulticastDomainOutput = exports.getTransitGatewayMulticastDomain = exports.getTransitGatewayConnectOutput = exports.getTransitGatewayConnect = exports.getTransitGatewayAttachmentOutput = exports.getTransitGatewayAttachment = exports.getTransitGatewayOutput = exports.getTransitGateway = exports.getTrafficMirrorTargetOutput = exports.getTrafficMirrorTarget = exports.getTrafficMirrorSessionOutput = exports.getTrafficMirrorSession = exports.getTrafficMirrorFilterRuleOutput = exports.getTrafficMirrorFilterRule = exports.getTrafficMirrorFilterOutput = exports.getTrafficMirrorFilter = exports.getSubnetRouteTableAssociationOutput = exports.getSubnetRouteTableAssociation = exports.getSubnetNetworkAclAssociationOutput = exports.getSubnetNetworkAclAssociation = exports.getSubnetCidrBlockOutput = exports.getSubnetCidrBlock = exports.getSubnetOutput = exports.getSubnet = exports.getSpotFleetOutput = exports.getSpotFleet = exports.getSecurityGroupIngressOutput = exports.getSecurityGroupIngress = exports.getSecurityGroupEgressOutput = exports.getSecurityGroupEgress = void 0;
exports.PlacementGroup = exports.NetworkInterfacePermission = exports.NetworkInterfaceAttachment = exports.NetworkInterface = exports.NetworkInsightsPath = exports.NetworkInsightsAnalysis = exports.NetworkInsightsAccessScopeAnalysis = exports.NetworkInsightsAccessScope = exports.NetworkAclEntry = exports.NetworkAcl = exports.NatGateway = exports.LocalGatewayRouteTableVPCAssociation = exports.LocalGatewayRoute = exports.LaunchTemplate = exports.KeyPair = exports.IPAMScope = exports.IPAMPool = exports.IPAMAllocation = exports.IPAM = exports.InternetGateway = exports.Instance = exports.Host = exports.getVolumeAttachmentOutput = exports.getVolumeAttachment = exports.getVolumeOutput = exports.getVolume = exports.getVPNGatewayRoutePropagationOutput = exports.getVPNGatewayRoutePropagation = exports.getVPNGatewayOutput = exports.getVPNGateway = exports.getVPNConnectionRouteOutput = exports.getVPNConnectionRoute = exports.getVPNConnectionOutput = exports.getVPNConnection = exports.getVPCPeeringConnectionOutput = exports.getVPCPeeringConnection = exports.getVPCGatewayAttachmentOutput = exports.getVPCGatewayAttachment = exports.getVPCEndpointServicePermissionsOutput = exports.getVPCEndpointServicePermissions = exports.getVPCEndpointServiceOutput = exports.getVPCEndpointService = exports.getVPCEndpointConnectionNotificationOutput = exports.getVPCEndpointConnectionNotification = exports.getVPCEndpointOutput = exports.getVPCEndpoint = exports.getVPCDHCPOptionsAssociationOutput = exports.getVPCDHCPOptionsAssociation = exports.getVPCCidrBlockOutput = exports.getVPCCidrBlock = void 0;
exports.VPNGatewayRoutePropagation = exports.VPNGateway = exports.VPNConnectionRoute = exports.VPNConnection = exports.VPCPeeringConnection = exports.VPCGatewayAttachment = exports.VPCEndpointServicePermissions = exports.VPCEndpointService = exports.VPCEndpointConnectionNotification = exports.VPCEndpoint = exports.VPCDHCPOptionsAssociation = exports.VPCCidrBlock = exports.VPC = exports.VolumeAttachment = exports.Volume = exports.TransitGatewayVpcAttachment = exports.TransitGatewayRouteTablePropagation = exports.TransitGatewayRouteTableAssociation = exports.TransitGatewayRouteTable = exports.TransitGatewayRoute = exports.TransitGatewayPeeringAttachment = exports.TransitGatewayMulticastGroupSource = exports.TransitGatewayMulticastGroupMember = exports.TransitGatewayMulticastDomainAssociation = exports.TransitGatewayMulticastDomain = exports.TransitGatewayConnect = exports.TransitGatewayAttachment = exports.TransitGateway = exports.TrafficMirrorTarget = exports.TrafficMirrorSession = exports.TrafficMirrorFilterRule = exports.TrafficMirrorFilter = exports.SubnetRouteTableAssociation = exports.SubnetNetworkAclAssociation = exports.SubnetCidrBlock = exports.Subnet = exports.SpotFleet = exports.SecurityGroupIngress = exports.SecurityGroupEgress = exports.SecurityGroup = exports.RouteTable = exports.Route = exports.PrefixList = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.CapacityReservation = null;
utilities.lazyLoad(exports, ["CapacityReservation"], () => require("./capacityReservation"));
exports.CapacityReservationFleet = null;
utilities.lazyLoad(exports, ["CapacityReservationFleet"], () => require("./capacityReservationFleet"));
exports.CarrierGateway = null;
utilities.lazyLoad(exports, ["CarrierGateway"], () => require("./carrierGateway"));
exports.ClientVpnAuthorizationRule = null;
utilities.lazyLoad(exports, ["ClientVpnAuthorizationRule"], () => require("./clientVpnAuthorizationRule"));
exports.ClientVpnEndpoint = null;
utilities.lazyLoad(exports, ["ClientVpnEndpoint"], () => require("./clientVpnEndpoint"));
exports.ClientVpnRoute = null;
utilities.lazyLoad(exports, ["ClientVpnRoute"], () => require("./clientVpnRoute"));
exports.ClientVpnTargetNetworkAssociation = null;
utilities.lazyLoad(exports, ["ClientVpnTargetNetworkAssociation"], () => require("./clientVpnTargetNetworkAssociation"));
exports.CustomerGateway = null;
utilities.lazyLoad(exports, ["CustomerGateway"], () => require("./customerGateway"));
exports.DHCPOptions = null;
utilities.lazyLoad(exports, ["DHCPOptions"], () => require("./dhcpoptions"));
exports.EC2Fleet = null;
utilities.lazyLoad(exports, ["EC2Fleet"], () => require("./ec2fleet"));
exports.EgressOnlyInternetGateway = null;
utilities.lazyLoad(exports, ["EgressOnlyInternetGateway"], () => require("./egressOnlyInternetGateway"));
exports.EIP = null;
utilities.lazyLoad(exports, ["EIP"], () => require("./eip"));
exports.EIPAssociation = null;
utilities.lazyLoad(exports, ["EIPAssociation"], () => require("./eipassociation"));
exports.EnclaveCertificateIamRoleAssociation = null;
utilities.lazyLoad(exports, ["EnclaveCertificateIamRoleAssociation"], () => require("./enclaveCertificateIamRoleAssociation"));
exports.FlowLog = null;
utilities.lazyLoad(exports, ["FlowLog"], () => require("./flowLog"));
exports.GatewayRouteTableAssociation = null;
utilities.lazyLoad(exports, ["GatewayRouteTableAssociation"], () => require("./gatewayRouteTableAssociation"));
exports.getCapacityReservation = null;
exports.getCapacityReservationOutput = null;
utilities.lazyLoad(exports, ["getCapacityReservation", "getCapacityReservationOutput"], () => require("./getCapacityReservation"));
exports.getCapacityReservationFleet = null;
exports.getCapacityReservationFleetOutput = null;
utilities.lazyLoad(exports, ["getCapacityReservationFleet", "getCapacityReservationFleetOutput"], () => require("./getCapacityReservationFleet"));
exports.getCarrierGateway = null;
exports.getCarrierGatewayOutput = null;
utilities.lazyLoad(exports, ["getCarrierGateway", "getCarrierGatewayOutput"], () => require("./getCarrierGateway"));
exports.getClientVpnAuthorizationRule = null;
exports.getClientVpnAuthorizationRuleOutput = null;
utilities.lazyLoad(exports, ["getClientVpnAuthorizationRule", "getClientVpnAuthorizationRuleOutput"], () => require("./getClientVpnAuthorizationRule"));
exports.getClientVpnEndpoint = null;
exports.getClientVpnEndpointOutput = null;
utilities.lazyLoad(exports, ["getClientVpnEndpoint", "getClientVpnEndpointOutput"], () => require("./getClientVpnEndpoint"));
exports.getClientVpnRoute = null;
exports.getClientVpnRouteOutput = null;
utilities.lazyLoad(exports, ["getClientVpnRoute", "getClientVpnRouteOutput"], () => require("./getClientVpnRoute"));
exports.getClientVpnTargetNetworkAssociation = null;
exports.getClientVpnTargetNetworkAssociationOutput = null;
utilities.lazyLoad(exports, ["getClientVpnTargetNetworkAssociation", "getClientVpnTargetNetworkAssociationOutput"], () => require("./getClientVpnTargetNetworkAssociation"));
exports.getCustomerGateway = null;
exports.getCustomerGatewayOutput = null;
utilities.lazyLoad(exports, ["getCustomerGateway", "getCustomerGatewayOutput"], () => require("./getCustomerGateway"));
exports.getDHCPOptions = null;
exports.getDHCPOptionsOutput = null;
utilities.lazyLoad(exports, ["getDHCPOptions", "getDHCPOptionsOutput"], () => require("./getDHCPOptions"));
exports.getEC2Fleet = null;
exports.getEC2FleetOutput = null;
utilities.lazyLoad(exports, ["getEC2Fleet", "getEC2FleetOutput"], () => require("./getEC2Fleet"));
exports.getEIP = null;
exports.getEIPOutput = null;
utilities.lazyLoad(exports, ["getEIP", "getEIPOutput"], () => require("./getEIP"));
exports.getEIPAssociation = null;
exports.getEIPAssociationOutput = null;
utilities.lazyLoad(exports, ["getEIPAssociation", "getEIPAssociationOutput"], () => require("./getEIPAssociation"));
exports.getEgressOnlyInternetGateway = null;
exports.getEgressOnlyInternetGatewayOutput = null;
utilities.lazyLoad(exports, ["getEgressOnlyInternetGateway", "getEgressOnlyInternetGatewayOutput"], () => require("./getEgressOnlyInternetGateway"));
exports.getEnclaveCertificateIamRoleAssociation = null;
exports.getEnclaveCertificateIamRoleAssociationOutput = null;
utilities.lazyLoad(exports, ["getEnclaveCertificateIamRoleAssociation", "getEnclaveCertificateIamRoleAssociationOutput"], () => require("./getEnclaveCertificateIamRoleAssociation"));
exports.getFlowLog = null;
exports.getFlowLogOutput = null;
utilities.lazyLoad(exports, ["getFlowLog", "getFlowLogOutput"], () => require("./getFlowLog"));
exports.getGatewayRouteTableAssociation = null;
exports.getGatewayRouteTableAssociationOutput = null;
utilities.lazyLoad(exports, ["getGatewayRouteTableAssociation", "getGatewayRouteTableAssociationOutput"], () => require("./getGatewayRouteTableAssociation"));
exports.getHost = null;
exports.getHostOutput = null;
utilities.lazyLoad(exports, ["getHost", "getHostOutput"], () => require("./getHost"));
exports.getIPAM = null;
exports.getIPAMOutput = null;
utilities.lazyLoad(exports, ["getIPAM", "getIPAMOutput"], () => require("./getIPAM"));
exports.getIPAMAllocation = null;
exports.getIPAMAllocationOutput = null;
utilities.lazyLoad(exports, ["getIPAMAllocation", "getIPAMAllocationOutput"], () => require("./getIPAMAllocation"));
exports.getIPAMPool = null;
exports.getIPAMPoolOutput = null;
utilities.lazyLoad(exports, ["getIPAMPool", "getIPAMPoolOutput"], () => require("./getIPAMPool"));
exports.getIPAMScope = null;
exports.getIPAMScopeOutput = null;
utilities.lazyLoad(exports, ["getIPAMScope", "getIPAMScopeOutput"], () => require("./getIPAMScope"));
exports.getInstance = null;
exports.getInstanceOutput = null;
utilities.lazyLoad(exports, ["getInstance", "getInstanceOutput"], () => require("./getInstance"));
exports.getInternetGateway = null;
exports.getInternetGatewayOutput = null;
utilities.lazyLoad(exports, ["getInternetGateway", "getInternetGatewayOutput"], () => require("./getInternetGateway"));
exports.getKeyPair = null;
exports.getKeyPairOutput = null;
utilities.lazyLoad(exports, ["getKeyPair", "getKeyPairOutput"], () => require("./getKeyPair"));
exports.getLaunchTemplate = null;
exports.getLaunchTemplateOutput = null;
utilities.lazyLoad(exports, ["getLaunchTemplate", "getLaunchTemplateOutput"], () => require("./getLaunchTemplate"));
exports.getLocalGatewayRoute = null;
exports.getLocalGatewayRouteOutput = null;
utilities.lazyLoad(exports, ["getLocalGatewayRoute", "getLocalGatewayRouteOutput"], () => require("./getLocalGatewayRoute"));
exports.getLocalGatewayRouteTableVPCAssociation = null;
exports.getLocalGatewayRouteTableVPCAssociationOutput = null;
utilities.lazyLoad(exports, ["getLocalGatewayRouteTableVPCAssociation", "getLocalGatewayRouteTableVPCAssociationOutput"], () => require("./getLocalGatewayRouteTableVPCAssociation"));
exports.getNatGateway = null;
exports.getNatGatewayOutput = null;
utilities.lazyLoad(exports, ["getNatGateway", "getNatGatewayOutput"], () => require("./getNatGateway"));
exports.getNetworkAcl = null;
exports.getNetworkAclOutput = null;
utilities.lazyLoad(exports, ["getNetworkAcl", "getNetworkAclOutput"], () => require("./getNetworkAcl"));
exports.getNetworkAclEntry = null;
exports.getNetworkAclEntryOutput = null;
utilities.lazyLoad(exports, ["getNetworkAclEntry", "getNetworkAclEntryOutput"], () => require("./getNetworkAclEntry"));
exports.getNetworkInsightsAccessScope = null;
exports.getNetworkInsightsAccessScopeOutput = null;
utilities.lazyLoad(exports, ["getNetworkInsightsAccessScope", "getNetworkInsightsAccessScopeOutput"], () => require("./getNetworkInsightsAccessScope"));
exports.getNetworkInsightsAccessScopeAnalysis = null;
exports.getNetworkInsightsAccessScopeAnalysisOutput = null;
utilities.lazyLoad(exports, ["getNetworkInsightsAccessScopeAnalysis", "getNetworkInsightsAccessScopeAnalysisOutput"], () => require("./getNetworkInsightsAccessScopeAnalysis"));
exports.getNetworkInsightsAnalysis = null;
exports.getNetworkInsightsAnalysisOutput = null;
utilities.lazyLoad(exports, ["getNetworkInsightsAnalysis", "getNetworkInsightsAnalysisOutput"], () => require("./getNetworkInsightsAnalysis"));
exports.getNetworkInsightsPath = null;
exports.getNetworkInsightsPathOutput = null;
utilities.lazyLoad(exports, ["getNetworkInsightsPath", "getNetworkInsightsPathOutput"], () => require("./getNetworkInsightsPath"));
exports.getNetworkInterface = null;
exports.getNetworkInterfaceOutput = null;
utilities.lazyLoad(exports, ["getNetworkInterface", "getNetworkInterfaceOutput"], () => require("./getNetworkInterface"));
exports.getNetworkInterfaceAttachment = null;
exports.getNetworkInterfaceAttachmentOutput = null;
utilities.lazyLoad(exports, ["getNetworkInterfaceAttachment", "getNetworkInterfaceAttachmentOutput"], () => require("./getNetworkInterfaceAttachment"));
exports.getNetworkInterfacePermission = null;
exports.getNetworkInterfacePermissionOutput = null;
utilities.lazyLoad(exports, ["getNetworkInterfacePermission", "getNetworkInterfacePermissionOutput"], () => require("./getNetworkInterfacePermission"));
exports.getPlacementGroup = null;
exports.getPlacementGroupOutput = null;
utilities.lazyLoad(exports, ["getPlacementGroup", "getPlacementGroupOutput"], () => require("./getPlacementGroup"));
exports.getPrefixList = null;
exports.getPrefixListOutput = null;
utilities.lazyLoad(exports, ["getPrefixList", "getPrefixListOutput"], () => require("./getPrefixList"));
exports.getRoute = null;
exports.getRouteOutput = null;
utilities.lazyLoad(exports, ["getRoute", "getRouteOutput"], () => require("./getRoute"));
exports.getRouteTable = null;
exports.getRouteTableOutput = null;
utilities.lazyLoad(exports, ["getRouteTable", "getRouteTableOutput"], () => require("./getRouteTable"));
exports.getSecurityGroup = null;
exports.getSecurityGroupOutput = null;
utilities.lazyLoad(exports, ["getSecurityGroup", "getSecurityGroupOutput"], () => require("./getSecurityGroup"));
exports.getSecurityGroupEgress = null;
exports.getSecurityGroupEgressOutput = null;
utilities.lazyLoad(exports, ["getSecurityGroupEgress", "getSecurityGroupEgressOutput"], () => require("./getSecurityGroupEgress"));
exports.getSecurityGroupIngress = null;
exports.getSecurityGroupIngressOutput = null;
utilities.lazyLoad(exports, ["getSecurityGroupIngress", "getSecurityGroupIngressOutput"], () => require("./getSecurityGroupIngress"));
exports.getSpotFleet = null;
exports.getSpotFleetOutput = null;
utilities.lazyLoad(exports, ["getSpotFleet", "getSpotFleetOutput"], () => require("./getSpotFleet"));
exports.getSubnet = null;
exports.getSubnetOutput = null;
utilities.lazyLoad(exports, ["getSubnet", "getSubnetOutput"], () => require("./getSubnet"));
exports.getSubnetCidrBlock = null;
exports.getSubnetCidrBlockOutput = null;
utilities.lazyLoad(exports, ["getSubnetCidrBlock", "getSubnetCidrBlockOutput"], () => require("./getSubnetCidrBlock"));
exports.getSubnetNetworkAclAssociation = null;
exports.getSubnetNetworkAclAssociationOutput = null;
utilities.lazyLoad(exports, ["getSubnetNetworkAclAssociation", "getSubnetNetworkAclAssociationOutput"], () => require("./getSubnetNetworkAclAssociation"));
exports.getSubnetRouteTableAssociation = null;
exports.getSubnetRouteTableAssociationOutput = null;
utilities.lazyLoad(exports, ["getSubnetRouteTableAssociation", "getSubnetRouteTableAssociationOutput"], () => require("./getSubnetRouteTableAssociation"));
exports.getTrafficMirrorFilter = null;
exports.getTrafficMirrorFilterOutput = null;
utilities.lazyLoad(exports, ["getTrafficMirrorFilter", "getTrafficMirrorFilterOutput"], () => require("./getTrafficMirrorFilter"));
exports.getTrafficMirrorFilterRule = null;
exports.getTrafficMirrorFilterRuleOutput = null;
utilities.lazyLoad(exports, ["getTrafficMirrorFilterRule", "getTrafficMirrorFilterRuleOutput"], () => require("./getTrafficMirrorFilterRule"));
exports.getTrafficMirrorSession = null;
exports.getTrafficMirrorSessionOutput = null;
utilities.lazyLoad(exports, ["getTrafficMirrorSession", "getTrafficMirrorSessionOutput"], () => require("./getTrafficMirrorSession"));
exports.getTrafficMirrorTarget = null;
exports.getTrafficMirrorTargetOutput = null;
utilities.lazyLoad(exports, ["getTrafficMirrorTarget", "getTrafficMirrorTargetOutput"], () => require("./getTrafficMirrorTarget"));
exports.getTransitGateway = null;
exports.getTransitGatewayOutput = null;
utilities.lazyLoad(exports, ["getTransitGateway", "getTransitGatewayOutput"], () => require("./getTransitGateway"));
exports.getTransitGatewayAttachment = null;
exports.getTransitGatewayAttachmentOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayAttachment", "getTransitGatewayAttachmentOutput"], () => require("./getTransitGatewayAttachment"));
exports.getTransitGatewayConnect = null;
exports.getTransitGatewayConnectOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayConnect", "getTransitGatewayConnectOutput"], () => require("./getTransitGatewayConnect"));
exports.getTransitGatewayMulticastDomain = null;
exports.getTransitGatewayMulticastDomainOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayMulticastDomain", "getTransitGatewayMulticastDomainOutput"], () => require("./getTransitGatewayMulticastDomain"));
exports.getTransitGatewayMulticastDomainAssociation = null;
exports.getTransitGatewayMulticastDomainAssociationOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayMulticastDomainAssociation", "getTransitGatewayMulticastDomainAssociationOutput"], () => require("./getTransitGatewayMulticastDomainAssociation"));
exports.getTransitGatewayMulticastGroupMember = null;
exports.getTransitGatewayMulticastGroupMemberOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayMulticastGroupMember", "getTransitGatewayMulticastGroupMemberOutput"], () => require("./getTransitGatewayMulticastGroupMember"));
exports.getTransitGatewayMulticastGroupSource = null;
exports.getTransitGatewayMulticastGroupSourceOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayMulticastGroupSource", "getTransitGatewayMulticastGroupSourceOutput"], () => require("./getTransitGatewayMulticastGroupSource"));
exports.getTransitGatewayPeeringAttachment = null;
exports.getTransitGatewayPeeringAttachmentOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayPeeringAttachment", "getTransitGatewayPeeringAttachmentOutput"], () => require("./getTransitGatewayPeeringAttachment"));
exports.getTransitGatewayRoute = null;
exports.getTransitGatewayRouteOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayRoute", "getTransitGatewayRouteOutput"], () => require("./getTransitGatewayRoute"));
exports.getTransitGatewayRouteTable = null;
exports.getTransitGatewayRouteTableOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayRouteTable", "getTransitGatewayRouteTableOutput"], () => require("./getTransitGatewayRouteTable"));
exports.getTransitGatewayRouteTableAssociation = null;
exports.getTransitGatewayRouteTableAssociationOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayRouteTableAssociation", "getTransitGatewayRouteTableAssociationOutput"], () => require("./getTransitGatewayRouteTableAssociation"));
exports.getTransitGatewayRouteTablePropagation = null;
exports.getTransitGatewayRouteTablePropagationOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayRouteTablePropagation", "getTransitGatewayRouteTablePropagationOutput"], () => require("./getTransitGatewayRouteTablePropagation"));
exports.getTransitGatewayVpcAttachment = null;
exports.getTransitGatewayVpcAttachmentOutput = null;
utilities.lazyLoad(exports, ["getTransitGatewayVpcAttachment", "getTransitGatewayVpcAttachmentOutput"], () => require("./getTransitGatewayVpcAttachment"));
exports.getVPC = null;
exports.getVPCOutput = null;
utilities.lazyLoad(exports, ["getVPC", "getVPCOutput"], () => require("./getVPC"));
exports.getVPCCidrBlock = null;
exports.getVPCCidrBlockOutput = null;
utilities.lazyLoad(exports, ["getVPCCidrBlock", "getVPCCidrBlockOutput"], () => require("./getVPCCidrBlock"));
exports.getVPCDHCPOptionsAssociation = null;
exports.getVPCDHCPOptionsAssociationOutput = null;
utilities.lazyLoad(exports, ["getVPCDHCPOptionsAssociation", "getVPCDHCPOptionsAssociationOutput"], () => require("./getVPCDHCPOptionsAssociation"));
exports.getVPCEndpoint = null;
exports.getVPCEndpointOutput = null;
utilities.lazyLoad(exports, ["getVPCEndpoint", "getVPCEndpointOutput"], () => require("./getVPCEndpoint"));
exports.getVPCEndpointConnectionNotification = null;
exports.getVPCEndpointConnectionNotificationOutput = null;
utilities.lazyLoad(exports, ["getVPCEndpointConnectionNotification", "getVPCEndpointConnectionNotificationOutput"], () => require("./getVPCEndpointConnectionNotification"));
exports.getVPCEndpointService = null;
exports.getVPCEndpointServiceOutput = null;
utilities.lazyLoad(exports, ["getVPCEndpointService", "getVPCEndpointServiceOutput"], () => require("./getVPCEndpointService"));
exports.getVPCEndpointServicePermissions = null;
exports.getVPCEndpointServicePermissionsOutput = null;
utilities.lazyLoad(exports, ["getVPCEndpointServicePermissions", "getVPCEndpointServicePermissionsOutput"], () => require("./getVPCEndpointServicePermissions"));
exports.getVPCGatewayAttachment = null;
exports.getVPCGatewayAttachmentOutput = null;
utilities.lazyLoad(exports, ["getVPCGatewayAttachment", "getVPCGatewayAttachmentOutput"], () => require("./getVPCGatewayAttachment"));
exports.getVPCPeeringConnection = null;
exports.getVPCPeeringConnectionOutput = null;
utilities.lazyLoad(exports, ["getVPCPeeringConnection", "getVPCPeeringConnectionOutput"], () => require("./getVPCPeeringConnection"));
exports.getVPNConnection = null;
exports.getVPNConnectionOutput = null;
utilities.lazyLoad(exports, ["getVPNConnection", "getVPNConnectionOutput"], () => require("./getVPNConnection"));
exports.getVPNConnectionRoute = null;
exports.getVPNConnectionRouteOutput = null;
utilities.lazyLoad(exports, ["getVPNConnectionRoute", "getVPNConnectionRouteOutput"], () => require("./getVPNConnectionRoute"));
exports.getVPNGateway = null;
exports.getVPNGatewayOutput = null;
utilities.lazyLoad(exports, ["getVPNGateway", "getVPNGatewayOutput"], () => require("./getVPNGateway"));
exports.getVPNGatewayRoutePropagation = null;
exports.getVPNGatewayRoutePropagationOutput = null;
utilities.lazyLoad(exports, ["getVPNGatewayRoutePropagation", "getVPNGatewayRoutePropagationOutput"], () => require("./getVPNGatewayRoutePropagation"));
exports.getVolume = null;
exports.getVolumeOutput = null;
utilities.lazyLoad(exports, ["getVolume", "getVolumeOutput"], () => require("./getVolume"));
exports.getVolumeAttachment = null;
exports.getVolumeAttachmentOutput = null;
utilities.lazyLoad(exports, ["getVolumeAttachment", "getVolumeAttachmentOutput"], () => require("./getVolumeAttachment"));
exports.Host = null;
utilities.lazyLoad(exports, ["Host"], () => require("./host"));
exports.Instance = null;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));
exports.InternetGateway = null;
utilities.lazyLoad(exports, ["InternetGateway"], () => require("./internetGateway"));
exports.IPAM = null;
utilities.lazyLoad(exports, ["IPAM"], () => require("./ipam"));
exports.IPAMAllocation = null;
utilities.lazyLoad(exports, ["IPAMAllocation"], () => require("./ipamallocation"));
exports.IPAMPool = null;
utilities.lazyLoad(exports, ["IPAMPool"], () => require("./ipampool"));
exports.IPAMScope = null;
utilities.lazyLoad(exports, ["IPAMScope"], () => require("./ipamscope"));
exports.KeyPair = null;
utilities.lazyLoad(exports, ["KeyPair"], () => require("./keyPair"));
exports.LaunchTemplate = null;
utilities.lazyLoad(exports, ["LaunchTemplate"], () => require("./launchTemplate"));
exports.LocalGatewayRoute = null;
utilities.lazyLoad(exports, ["LocalGatewayRoute"], () => require("./localGatewayRoute"));
exports.LocalGatewayRouteTableVPCAssociation = null;
utilities.lazyLoad(exports, ["LocalGatewayRouteTableVPCAssociation"], () => require("./localGatewayRouteTableVPCAssociation"));
exports.NatGateway = null;
utilities.lazyLoad(exports, ["NatGateway"], () => require("./natGateway"));
exports.NetworkAcl = null;
utilities.lazyLoad(exports, ["NetworkAcl"], () => require("./networkAcl"));
exports.NetworkAclEntry = null;
utilities.lazyLoad(exports, ["NetworkAclEntry"], () => require("./networkAclEntry"));
exports.NetworkInsightsAccessScope = null;
utilities.lazyLoad(exports, ["NetworkInsightsAccessScope"], () => require("./networkInsightsAccessScope"));
exports.NetworkInsightsAccessScopeAnalysis = null;
utilities.lazyLoad(exports, ["NetworkInsightsAccessScopeAnalysis"], () => require("./networkInsightsAccessScopeAnalysis"));
exports.NetworkInsightsAnalysis = null;
utilities.lazyLoad(exports, ["NetworkInsightsAnalysis"], () => require("./networkInsightsAnalysis"));
exports.NetworkInsightsPath = null;
utilities.lazyLoad(exports, ["NetworkInsightsPath"], () => require("./networkInsightsPath"));
exports.NetworkInterface = null;
utilities.lazyLoad(exports, ["NetworkInterface"], () => require("./networkInterface"));
exports.NetworkInterfaceAttachment = null;
utilities.lazyLoad(exports, ["NetworkInterfaceAttachment"], () => require("./networkInterfaceAttachment"));
exports.NetworkInterfacePermission = null;
utilities.lazyLoad(exports, ["NetworkInterfacePermission"], () => require("./networkInterfacePermission"));
exports.PlacementGroup = null;
utilities.lazyLoad(exports, ["PlacementGroup"], () => require("./placementGroup"));
exports.PrefixList = null;
utilities.lazyLoad(exports, ["PrefixList"], () => require("./prefixList"));
exports.Route = null;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));
exports.RouteTable = null;
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));
exports.SecurityGroup = null;
utilities.lazyLoad(exports, ["SecurityGroup"], () => require("./securityGroup"));
exports.SecurityGroupEgress = null;
utilities.lazyLoad(exports, ["SecurityGroupEgress"], () => require("./securityGroupEgress"));
exports.SecurityGroupIngress = null;
utilities.lazyLoad(exports, ["SecurityGroupIngress"], () => require("./securityGroupIngress"));
exports.SpotFleet = null;
utilities.lazyLoad(exports, ["SpotFleet"], () => require("./spotFleet"));
exports.Subnet = null;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));
exports.SubnetCidrBlock = null;
utilities.lazyLoad(exports, ["SubnetCidrBlock"], () => require("./subnetCidrBlock"));
exports.SubnetNetworkAclAssociation = null;
utilities.lazyLoad(exports, ["SubnetNetworkAclAssociation"], () => require("./subnetNetworkAclAssociation"));
exports.SubnetRouteTableAssociation = null;
utilities.lazyLoad(exports, ["SubnetRouteTableAssociation"], () => require("./subnetRouteTableAssociation"));
exports.TrafficMirrorFilter = null;
utilities.lazyLoad(exports, ["TrafficMirrorFilter"], () => require("./trafficMirrorFilter"));
exports.TrafficMirrorFilterRule = null;
utilities.lazyLoad(exports, ["TrafficMirrorFilterRule"], () => require("./trafficMirrorFilterRule"));
exports.TrafficMirrorSession = null;
utilities.lazyLoad(exports, ["TrafficMirrorSession"], () => require("./trafficMirrorSession"));
exports.TrafficMirrorTarget = null;
utilities.lazyLoad(exports, ["TrafficMirrorTarget"], () => require("./trafficMirrorTarget"));
exports.TransitGateway = null;
utilities.lazyLoad(exports, ["TransitGateway"], () => require("./transitGateway"));
exports.TransitGatewayAttachment = null;
utilities.lazyLoad(exports, ["TransitGatewayAttachment"], () => require("./transitGatewayAttachment"));
exports.TransitGatewayConnect = null;
utilities.lazyLoad(exports, ["TransitGatewayConnect"], () => require("./transitGatewayConnect"));
exports.TransitGatewayMulticastDomain = null;
utilities.lazyLoad(exports, ["TransitGatewayMulticastDomain"], () => require("./transitGatewayMulticastDomain"));
exports.TransitGatewayMulticastDomainAssociation = null;
utilities.lazyLoad(exports, ["TransitGatewayMulticastDomainAssociation"], () => require("./transitGatewayMulticastDomainAssociation"));
exports.TransitGatewayMulticastGroupMember = null;
utilities.lazyLoad(exports, ["TransitGatewayMulticastGroupMember"], () => require("./transitGatewayMulticastGroupMember"));
exports.TransitGatewayMulticastGroupSource = null;
utilities.lazyLoad(exports, ["TransitGatewayMulticastGroupSource"], () => require("./transitGatewayMulticastGroupSource"));
exports.TransitGatewayPeeringAttachment = null;
utilities.lazyLoad(exports, ["TransitGatewayPeeringAttachment"], () => require("./transitGatewayPeeringAttachment"));
exports.TransitGatewayRoute = null;
utilities.lazyLoad(exports, ["TransitGatewayRoute"], () => require("./transitGatewayRoute"));
exports.TransitGatewayRouteTable = null;
utilities.lazyLoad(exports, ["TransitGatewayRouteTable"], () => require("./transitGatewayRouteTable"));
exports.TransitGatewayRouteTableAssociation = null;
utilities.lazyLoad(exports, ["TransitGatewayRouteTableAssociation"], () => require("./transitGatewayRouteTableAssociation"));
exports.TransitGatewayRouteTablePropagation = null;
utilities.lazyLoad(exports, ["TransitGatewayRouteTablePropagation"], () => require("./transitGatewayRouteTablePropagation"));
exports.TransitGatewayVpcAttachment = null;
utilities.lazyLoad(exports, ["TransitGatewayVpcAttachment"], () => require("./transitGatewayVpcAttachment"));
exports.Volume = null;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));
exports.VolumeAttachment = null;
utilities.lazyLoad(exports, ["VolumeAttachment"], () => require("./volumeAttachment"));
exports.VPC = null;
utilities.lazyLoad(exports, ["VPC"], () => require("./vpc"));
exports.VPCCidrBlock = null;
utilities.lazyLoad(exports, ["VPCCidrBlock"], () => require("./vpccidrBlock"));
exports.VPCDHCPOptionsAssociation = null;
utilities.lazyLoad(exports, ["VPCDHCPOptionsAssociation"], () => require("./vpcdhcpoptionsAssociation"));
exports.VPCEndpoint = null;
utilities.lazyLoad(exports, ["VPCEndpoint"], () => require("./vpcendpoint"));
exports.VPCEndpointConnectionNotification = null;
utilities.lazyLoad(exports, ["VPCEndpointConnectionNotification"], () => require("./vpcendpointConnectionNotification"));
exports.VPCEndpointService = null;
utilities.lazyLoad(exports, ["VPCEndpointService"], () => require("./vpcendpointService"));
exports.VPCEndpointServicePermissions = null;
utilities.lazyLoad(exports, ["VPCEndpointServicePermissions"], () => require("./vpcendpointServicePermissions"));
exports.VPCGatewayAttachment = null;
utilities.lazyLoad(exports, ["VPCGatewayAttachment"], () => require("./vpcgatewayAttachment"));
exports.VPCPeeringConnection = null;
utilities.lazyLoad(exports, ["VPCPeeringConnection"], () => require("./vpcpeeringConnection"));
exports.VPNConnection = null;
utilities.lazyLoad(exports, ["VPNConnection"], () => require("./vpnconnection"));
exports.VPNConnectionRoute = null;
utilities.lazyLoad(exports, ["VPNConnectionRoute"], () => require("./vpnconnectionRoute"));
exports.VPNGateway = null;
utilities.lazyLoad(exports, ["VPNGateway"], () => require("./vpngateway"));
exports.VPNGatewayRoutePropagation = null;
utilities.lazyLoad(exports, ["VPNGatewayRoutePropagation"], () => require("./vpngatewayRoutePropagation"));
// Export enums:
__exportStar(require("../types/enums/ec2"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:ec2:CapacityReservation":
                return new exports.CapacityReservation(name, undefined, { urn });
            case "aws-native:ec2:CapacityReservationFleet":
                return new exports.CapacityReservationFleet(name, undefined, { urn });
            case "aws-native:ec2:CarrierGateway":
                return new exports.CarrierGateway(name, undefined, { urn });
            case "aws-native:ec2:ClientVpnAuthorizationRule":
                return new exports.ClientVpnAuthorizationRule(name, undefined, { urn });
            case "aws-native:ec2:ClientVpnEndpoint":
                return new exports.ClientVpnEndpoint(name, undefined, { urn });
            case "aws-native:ec2:ClientVpnRoute":
                return new exports.ClientVpnRoute(name, undefined, { urn });
            case "aws-native:ec2:ClientVpnTargetNetworkAssociation":
                return new exports.ClientVpnTargetNetworkAssociation(name, undefined, { urn });
            case "aws-native:ec2:CustomerGateway":
                return new exports.CustomerGateway(name, undefined, { urn });
            case "aws-native:ec2:DHCPOptions":
                return new exports.DHCPOptions(name, undefined, { urn });
            case "aws-native:ec2:EC2Fleet":
                return new exports.EC2Fleet(name, undefined, { urn });
            case "aws-native:ec2:EIP":
                return new exports.EIP(name, undefined, { urn });
            case "aws-native:ec2:EIPAssociation":
                return new exports.EIPAssociation(name, undefined, { urn });
            case "aws-native:ec2:EgressOnlyInternetGateway":
                return new exports.EgressOnlyInternetGateway(name, undefined, { urn });
            case "aws-native:ec2:EnclaveCertificateIamRoleAssociation":
                return new exports.EnclaveCertificateIamRoleAssociation(name, undefined, { urn });
            case "aws-native:ec2:FlowLog":
                return new exports.FlowLog(name, undefined, { urn });
            case "aws-native:ec2:GatewayRouteTableAssociation":
                return new exports.GatewayRouteTableAssociation(name, undefined, { urn });
            case "aws-native:ec2:Host":
                return new exports.Host(name, undefined, { urn });
            case "aws-native:ec2:IPAM":
                return new exports.IPAM(name, undefined, { urn });
            case "aws-native:ec2:IPAMAllocation":
                return new exports.IPAMAllocation(name, undefined, { urn });
            case "aws-native:ec2:IPAMPool":
                return new exports.IPAMPool(name, undefined, { urn });
            case "aws-native:ec2:IPAMScope":
                return new exports.IPAMScope(name, undefined, { urn });
            case "aws-native:ec2:Instance":
                return new exports.Instance(name, undefined, { urn });
            case "aws-native:ec2:InternetGateway":
                return new exports.InternetGateway(name, undefined, { urn });
            case "aws-native:ec2:KeyPair":
                return new exports.KeyPair(name, undefined, { urn });
            case "aws-native:ec2:LaunchTemplate":
                return new exports.LaunchTemplate(name, undefined, { urn });
            case "aws-native:ec2:LocalGatewayRoute":
                return new exports.LocalGatewayRoute(name, undefined, { urn });
            case "aws-native:ec2:LocalGatewayRouteTableVPCAssociation":
                return new exports.LocalGatewayRouteTableVPCAssociation(name, undefined, { urn });
            case "aws-native:ec2:NatGateway":
                return new exports.NatGateway(name, undefined, { urn });
            case "aws-native:ec2:NetworkAcl":
                return new exports.NetworkAcl(name, undefined, { urn });
            case "aws-native:ec2:NetworkAclEntry":
                return new exports.NetworkAclEntry(name, undefined, { urn });
            case "aws-native:ec2:NetworkInsightsAccessScope":
                return new exports.NetworkInsightsAccessScope(name, undefined, { urn });
            case "aws-native:ec2:NetworkInsightsAccessScopeAnalysis":
                return new exports.NetworkInsightsAccessScopeAnalysis(name, undefined, { urn });
            case "aws-native:ec2:NetworkInsightsAnalysis":
                return new exports.NetworkInsightsAnalysis(name, undefined, { urn });
            case "aws-native:ec2:NetworkInsightsPath":
                return new exports.NetworkInsightsPath(name, undefined, { urn });
            case "aws-native:ec2:NetworkInterface":
                return new exports.NetworkInterface(name, undefined, { urn });
            case "aws-native:ec2:NetworkInterfaceAttachment":
                return new exports.NetworkInterfaceAttachment(name, undefined, { urn });
            case "aws-native:ec2:NetworkInterfacePermission":
                return new exports.NetworkInterfacePermission(name, undefined, { urn });
            case "aws-native:ec2:PlacementGroup":
                return new exports.PlacementGroup(name, undefined, { urn });
            case "aws-native:ec2:PrefixList":
                return new exports.PrefixList(name, undefined, { urn });
            case "aws-native:ec2:Route":
                return new exports.Route(name, undefined, { urn });
            case "aws-native:ec2:RouteTable":
                return new exports.RouteTable(name, undefined, { urn });
            case "aws-native:ec2:SecurityGroup":
                return new exports.SecurityGroup(name, undefined, { urn });
            case "aws-native:ec2:SecurityGroupEgress":
                return new exports.SecurityGroupEgress(name, undefined, { urn });
            case "aws-native:ec2:SecurityGroupIngress":
                return new exports.SecurityGroupIngress(name, undefined, { urn });
            case "aws-native:ec2:SpotFleet":
                return new exports.SpotFleet(name, undefined, { urn });
            case "aws-native:ec2:Subnet":
                return new exports.Subnet(name, undefined, { urn });
            case "aws-native:ec2:SubnetCidrBlock":
                return new exports.SubnetCidrBlock(name, undefined, { urn });
            case "aws-native:ec2:SubnetNetworkAclAssociation":
                return new exports.SubnetNetworkAclAssociation(name, undefined, { urn });
            case "aws-native:ec2:SubnetRouteTableAssociation":
                return new exports.SubnetRouteTableAssociation(name, undefined, { urn });
            case "aws-native:ec2:TrafficMirrorFilter":
                return new exports.TrafficMirrorFilter(name, undefined, { urn });
            case "aws-native:ec2:TrafficMirrorFilterRule":
                return new exports.TrafficMirrorFilterRule(name, undefined, { urn });
            case "aws-native:ec2:TrafficMirrorSession":
                return new exports.TrafficMirrorSession(name, undefined, { urn });
            case "aws-native:ec2:TrafficMirrorTarget":
                return new exports.TrafficMirrorTarget(name, undefined, { urn });
            case "aws-native:ec2:TransitGateway":
                return new exports.TransitGateway(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayAttachment":
                return new exports.TransitGatewayAttachment(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayConnect":
                return new exports.TransitGatewayConnect(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayMulticastDomain":
                return new exports.TransitGatewayMulticastDomain(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayMulticastDomainAssociation":
                return new exports.TransitGatewayMulticastDomainAssociation(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayMulticastGroupMember":
                return new exports.TransitGatewayMulticastGroupMember(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayMulticastGroupSource":
                return new exports.TransitGatewayMulticastGroupSource(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayPeeringAttachment":
                return new exports.TransitGatewayPeeringAttachment(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayRoute":
                return new exports.TransitGatewayRoute(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayRouteTable":
                return new exports.TransitGatewayRouteTable(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayRouteTableAssociation":
                return new exports.TransitGatewayRouteTableAssociation(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayRouteTablePropagation":
                return new exports.TransitGatewayRouteTablePropagation(name, undefined, { urn });
            case "aws-native:ec2:TransitGatewayVpcAttachment":
                return new exports.TransitGatewayVpcAttachment(name, undefined, { urn });
            case "aws-native:ec2:VPC":
                return new exports.VPC(name, undefined, { urn });
            case "aws-native:ec2:VPCCidrBlock":
                return new exports.VPCCidrBlock(name, undefined, { urn });
            case "aws-native:ec2:VPCDHCPOptionsAssociation":
                return new exports.VPCDHCPOptionsAssociation(name, undefined, { urn });
            case "aws-native:ec2:VPCEndpoint":
                return new exports.VPCEndpoint(name, undefined, { urn });
            case "aws-native:ec2:VPCEndpointConnectionNotification":
                return new exports.VPCEndpointConnectionNotification(name, undefined, { urn });
            case "aws-native:ec2:VPCEndpointService":
                return new exports.VPCEndpointService(name, undefined, { urn });
            case "aws-native:ec2:VPCEndpointServicePermissions":
                return new exports.VPCEndpointServicePermissions(name, undefined, { urn });
            case "aws-native:ec2:VPCGatewayAttachment":
                return new exports.VPCGatewayAttachment(name, undefined, { urn });
            case "aws-native:ec2:VPCPeeringConnection":
                return new exports.VPCPeeringConnection(name, undefined, { urn });
            case "aws-native:ec2:VPNConnection":
                return new exports.VPNConnection(name, undefined, { urn });
            case "aws-native:ec2:VPNConnectionRoute":
                return new exports.VPNConnectionRoute(name, undefined, { urn });
            case "aws-native:ec2:VPNGateway":
                return new exports.VPNGateway(name, undefined, { urn });
            case "aws-native:ec2:VPNGatewayRoutePropagation":
                return new exports.VPNGatewayRoutePropagation(name, undefined, { urn });
            case "aws-native:ec2:Volume":
                return new exports.Volume(name, undefined, { urn });
            case "aws-native:ec2:VolumeAttachment":
                return new exports.VolumeAttachment(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "ec2", _module);
//# sourceMappingURL=index.js.map