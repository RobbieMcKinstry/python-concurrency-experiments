export declare const AgreementStatus: {
    readonly Active: "ACTIVE";
    readonly Inactive: "INACTIVE";
};
/**
 * Specifies the status of the agreement.
 */
export declare type AgreementStatus = (typeof AgreementStatus)[keyof typeof AgreementStatus];
export declare const CertificateStatus: {
    readonly Active: "ACTIVE";
    readonly Pending: "PENDING";
    readonly Inactive: "INACTIVE";
};
/**
 * A status description for the certificate.
 */
export declare type CertificateStatus = (typeof CertificateStatus)[keyof typeof CertificateStatus];
export declare const CertificateType: {
    readonly Certificate: "CERTIFICATE";
    readonly CertificateWithPrivateKey: "CERTIFICATE_WITH_PRIVATE_KEY";
};
/**
 * Describing the type of certificate. With or without a private key.
 */
export declare type CertificateType = (typeof CertificateType)[keyof typeof CertificateType];
export declare const CertificateUsage: {
    readonly Signing: "SIGNING";
    readonly Encryption: "ENCRYPTION";
};
/**
 * Specifies the usage type for the certificate.
 */
export declare type CertificateUsage = (typeof CertificateUsage)[keyof typeof CertificateUsage];
export declare const ConnectorAs2ConfigPropertiesCompression: {
    readonly Zlib: "ZLIB";
    readonly Disabled: "DISABLED";
};
/**
 * Compression setting for this AS2 connector configuration.
 */
export declare type ConnectorAs2ConfigPropertiesCompression = (typeof ConnectorAs2ConfigPropertiesCompression)[keyof typeof ConnectorAs2ConfigPropertiesCompression];
export declare const ConnectorAs2ConfigPropertiesEncryptionAlgorithm: {
    readonly Aes128Cbc: "AES128_CBC";
    readonly Aes192Cbc: "AES192_CBC";
    readonly Aes256Cbc: "AES256_CBC";
};
/**
 * Encryption algorithm for this AS2 connector configuration.
 */
export declare type ConnectorAs2ConfigPropertiesEncryptionAlgorithm = (typeof ConnectorAs2ConfigPropertiesEncryptionAlgorithm)[keyof typeof ConnectorAs2ConfigPropertiesEncryptionAlgorithm];
export declare const ConnectorAs2ConfigPropertiesMdnResponse: {
    readonly Sync: "SYNC";
    readonly None: "NONE";
};
/**
 * MDN Response setting for this AS2 connector configuration.
 */
export declare type ConnectorAs2ConfigPropertiesMdnResponse = (typeof ConnectorAs2ConfigPropertiesMdnResponse)[keyof typeof ConnectorAs2ConfigPropertiesMdnResponse];
export declare const ConnectorAs2ConfigPropertiesMdnSigningAlgorithm: {
    readonly Sha256: "SHA256";
    readonly Sha384: "SHA384";
    readonly Sha512: "SHA512";
    readonly Sha1: "SHA1";
    readonly None: "NONE";
    readonly Default: "DEFAULT";
};
/**
 * MDN Signing algorithm for this AS2 connector configuration.
 */
export declare type ConnectorAs2ConfigPropertiesMdnSigningAlgorithm = (typeof ConnectorAs2ConfigPropertiesMdnSigningAlgorithm)[keyof typeof ConnectorAs2ConfigPropertiesMdnSigningAlgorithm];
export declare const ConnectorAs2ConfigPropertiesSigningAlgorithm: {
    readonly Sha256: "SHA256";
    readonly Sha384: "SHA384";
    readonly Sha512: "SHA512";
    readonly Sha1: "SHA1";
    readonly None: "NONE";
};
/**
 * Signing algorithm for this AS2 connector configuration.
 */
export declare type ConnectorAs2ConfigPropertiesSigningAlgorithm = (typeof ConnectorAs2ConfigPropertiesSigningAlgorithm)[keyof typeof ConnectorAs2ConfigPropertiesSigningAlgorithm];
export declare const ProfileType: {
    readonly Local: "LOCAL";
    readonly Partner: "PARTNER";
};
/**
 * Enum specifying whether the profile is local or associated with a trading partner.
 */
export declare type ProfileType = (typeof ProfileType)[keyof typeof ProfileType];
export declare const WorkflowStepCopyStepDetailsPropertiesOverwriteExisting: {
    readonly True: "TRUE";
    readonly False: "FALSE";
};
/**
 * A flag that indicates whether or not to overwrite an existing file of the same name. The default is FALSE.
 */
export declare type WorkflowStepCopyStepDetailsPropertiesOverwriteExisting = (typeof WorkflowStepCopyStepDetailsPropertiesOverwriteExisting)[keyof typeof WorkflowStepCopyStepDetailsPropertiesOverwriteExisting];
export declare const WorkflowStepType: {
    readonly Copy: "COPY";
    readonly Custom: "CUSTOM";
    readonly Delete: "DELETE";
    readonly Tag: "TAG";
};
export declare type WorkflowStepType = (typeof WorkflowStepType)[keyof typeof WorkflowStepType];
