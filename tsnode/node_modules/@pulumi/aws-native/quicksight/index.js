"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Theme = exports.Template = exports.getThemeOutput = exports.getTheme = exports.getTemplateOutput = exports.getTemplate = exports.getDataSourceOutput = exports.getDataSource = exports.getDataSetOutput = exports.getDataSet = exports.getDashboardOutput = exports.getDashboard = exports.getAnalysisOutput = exports.getAnalysis = exports.DataSource = exports.DataSet = exports.Dashboard = exports.Analysis = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.Analysis = null;
utilities.lazyLoad(exports, ["Analysis"], () => require("./analysis"));
exports.Dashboard = null;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));
exports.DataSet = null;
utilities.lazyLoad(exports, ["DataSet"], () => require("./dataSet"));
exports.DataSource = null;
utilities.lazyLoad(exports, ["DataSource"], () => require("./dataSource"));
exports.getAnalysis = null;
exports.getAnalysisOutput = null;
utilities.lazyLoad(exports, ["getAnalysis", "getAnalysisOutput"], () => require("./getAnalysis"));
exports.getDashboard = null;
exports.getDashboardOutput = null;
utilities.lazyLoad(exports, ["getDashboard", "getDashboardOutput"], () => require("./getDashboard"));
exports.getDataSet = null;
exports.getDataSetOutput = null;
utilities.lazyLoad(exports, ["getDataSet", "getDataSetOutput"], () => require("./getDataSet"));
exports.getDataSource = null;
exports.getDataSourceOutput = null;
utilities.lazyLoad(exports, ["getDataSource", "getDataSourceOutput"], () => require("./getDataSource"));
exports.getTemplate = null;
exports.getTemplateOutput = null;
utilities.lazyLoad(exports, ["getTemplate", "getTemplateOutput"], () => require("./getTemplate"));
exports.getTheme = null;
exports.getThemeOutput = null;
utilities.lazyLoad(exports, ["getTheme", "getThemeOutput"], () => require("./getTheme"));
exports.Template = null;
utilities.lazyLoad(exports, ["Template"], () => require("./template"));
exports.Theme = null;
utilities.lazyLoad(exports, ["Theme"], () => require("./theme"));
// Export enums:
__exportStar(require("../types/enums/quicksight"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws-native:quicksight:Analysis":
                return new exports.Analysis(name, undefined, { urn });
            case "aws-native:quicksight:Dashboard":
                return new exports.Dashboard(name, undefined, { urn });
            case "aws-native:quicksight:DataSet":
                return new exports.DataSet(name, undefined, { urn });
            case "aws-native:quicksight:DataSource":
                return new exports.DataSource(name, undefined, { urn });
            case "aws-native:quicksight:Template":
                return new exports.Template(name, undefined, { urn });
            case "aws-native:quicksight:Theme":
                return new exports.Theme(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-native", "quicksight", _module);
//# sourceMappingURL=index.js.map