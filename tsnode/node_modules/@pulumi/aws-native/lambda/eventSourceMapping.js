"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSourceMapping = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource Type definition for AWS::Lambda::EventSourceMapping
 */
class EventSourceMapping extends pulumi.CustomResource {
    /**
     * Create a EventSourceMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.functionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            resourceInputs["amazonManagedKafkaEventSourceConfig"] = args ? args.amazonManagedKafkaEventSourceConfig : undefined;
            resourceInputs["batchSize"] = args ? args.batchSize : undefined;
            resourceInputs["bisectBatchOnFunctionError"] = args ? args.bisectBatchOnFunctionError : undefined;
            resourceInputs["destinationConfig"] = args ? args.destinationConfig : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["eventSourceArn"] = args ? args.eventSourceArn : undefined;
            resourceInputs["filterCriteria"] = args ? args.filterCriteria : undefined;
            resourceInputs["functionName"] = args ? args.functionName : undefined;
            resourceInputs["functionResponseTypes"] = args ? args.functionResponseTypes : undefined;
            resourceInputs["maximumBatchingWindowInSeconds"] = args ? args.maximumBatchingWindowInSeconds : undefined;
            resourceInputs["maximumRecordAgeInSeconds"] = args ? args.maximumRecordAgeInSeconds : undefined;
            resourceInputs["maximumRetryAttempts"] = args ? args.maximumRetryAttempts : undefined;
            resourceInputs["parallelizationFactor"] = args ? args.parallelizationFactor : undefined;
            resourceInputs["queues"] = args ? args.queues : undefined;
            resourceInputs["selfManagedEventSource"] = args ? args.selfManagedEventSource : undefined;
            resourceInputs["selfManagedKafkaEventSourceConfig"] = args ? args.selfManagedKafkaEventSourceConfig : undefined;
            resourceInputs["sourceAccessConfigurations"] = args ? args.sourceAccessConfigurations : undefined;
            resourceInputs["startingPosition"] = args ? args.startingPosition : undefined;
            resourceInputs["startingPositionTimestamp"] = args ? args.startingPositionTimestamp : undefined;
            resourceInputs["topics"] = args ? args.topics : undefined;
            resourceInputs["tumblingWindowInSeconds"] = args ? args.tumblingWindowInSeconds : undefined;
        }
        else {
            resourceInputs["amazonManagedKafkaEventSourceConfig"] = undefined /*out*/;
            resourceInputs["batchSize"] = undefined /*out*/;
            resourceInputs["bisectBatchOnFunctionError"] = undefined /*out*/;
            resourceInputs["destinationConfig"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["eventSourceArn"] = undefined /*out*/;
            resourceInputs["filterCriteria"] = undefined /*out*/;
            resourceInputs["functionName"] = undefined /*out*/;
            resourceInputs["functionResponseTypes"] = undefined /*out*/;
            resourceInputs["maximumBatchingWindowInSeconds"] = undefined /*out*/;
            resourceInputs["maximumRecordAgeInSeconds"] = undefined /*out*/;
            resourceInputs["maximumRetryAttempts"] = undefined /*out*/;
            resourceInputs["parallelizationFactor"] = undefined /*out*/;
            resourceInputs["queues"] = undefined /*out*/;
            resourceInputs["selfManagedEventSource"] = undefined /*out*/;
            resourceInputs["selfManagedKafkaEventSourceConfig"] = undefined /*out*/;
            resourceInputs["sourceAccessConfigurations"] = undefined /*out*/;
            resourceInputs["startingPosition"] = undefined /*out*/;
            resourceInputs["startingPositionTimestamp"] = undefined /*out*/;
            resourceInputs["topics"] = undefined /*out*/;
            resourceInputs["tumblingWindowInSeconds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventSourceMapping.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing EventSourceMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new EventSourceMapping(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EventSourceMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventSourceMapping.__pulumiType;
    }
}
exports.EventSourceMapping = EventSourceMapping;
/** @internal */
EventSourceMapping.__pulumiType = 'aws-native:lambda:EventSourceMapping';
//# sourceMappingURL=eventSourceMapping.js.map