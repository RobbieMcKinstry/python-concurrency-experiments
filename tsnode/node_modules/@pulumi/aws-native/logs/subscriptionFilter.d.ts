import * as pulumi from "@pulumi/pulumi";
/**
 * An example resource schema demonstrating some basic constructs and validation rules.
 */
export declare class SubscriptionFilter extends pulumi.CustomResource {
    /**
     * Get an existing SubscriptionFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): SubscriptionFilter;
    /**
     * Returns true if the given object is an instance of SubscriptionFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is SubscriptionFilter;
    /**
     * The Amazon Resource Name (ARN) of the destination.
     */
    readonly destinationArn: pulumi.Output<string>;
    /**
     * The name of the filter generated by resource.
     */
    readonly filterName: pulumi.Output<string>;
    /**
     * The filtering expressions that restrict what gets delivered to the destination AWS resource.
     */
    readonly filterPattern: pulumi.Output<string>;
    /**
     * Existing log group that you want to associate with this filter.
     */
    readonly logGroupName: pulumi.Output<string>;
    /**
     * The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
     */
    readonly roleArn: pulumi.Output<string | undefined>;
    /**
     * Create a SubscriptionFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubscriptionFilterArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a SubscriptionFilter resource.
 */
export interface SubscriptionFilterArgs {
    /**
     * The Amazon Resource Name (ARN) of the destination.
     */
    destinationArn: pulumi.Input<string>;
    /**
     * The filtering expressions that restrict what gets delivered to the destination AWS resource.
     */
    filterPattern: pulumi.Input<string>;
    /**
     * Existing log group that you want to associate with this filter.
     */
    logGroupName: pulumi.Input<string>;
    /**
     * The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
     */
    roleArn?: pulumi.Input<string>;
}
